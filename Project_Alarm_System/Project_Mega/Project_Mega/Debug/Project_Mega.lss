
Project_Mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800200  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080036c  0080036c  0000156a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026be  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000122e  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000125a  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00006280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000886  00000000  00000000  00006584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012dc  00000000  00000000  00006e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000080e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
       2:	00 00       	nop
       4:	07 c1       	rjmp	.+526    	; 0x214 <__bad_interrupt>
       6:	00 00       	nop
       8:	05 c1       	rjmp	.+522    	; 0x214 <__bad_interrupt>
       a:	00 00       	nop
       c:	03 c1       	rjmp	.+518    	; 0x214 <__bad_interrupt>
       e:	00 00       	nop
      10:	01 c1       	rjmp	.+514    	; 0x214 <__bad_interrupt>
      12:	00 00       	nop
      14:	ff c0       	rjmp	.+510    	; 0x214 <__bad_interrupt>
      16:	00 00       	nop
      18:	fd c0       	rjmp	.+506    	; 0x214 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fb c0       	rjmp	.+502    	; 0x214 <__bad_interrupt>
      1e:	00 00       	nop
      20:	f9 c0       	rjmp	.+498    	; 0x214 <__bad_interrupt>
      22:	00 00       	nop
      24:	f7 c0       	rjmp	.+494    	; 0x214 <__bad_interrupt>
      26:	00 00       	nop
      28:	f5 c0       	rjmp	.+490    	; 0x214 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f3 c0       	rjmp	.+486    	; 0x214 <__bad_interrupt>
      2e:	00 00       	nop
      30:	f1 c0       	rjmp	.+482    	; 0x214 <__bad_interrupt>
      32:	00 00       	nop
      34:	ef c0       	rjmp	.+478    	; 0x214 <__bad_interrupt>
      36:	00 00       	nop
      38:	ed c0       	rjmp	.+474    	; 0x214 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	eb c0       	rjmp	.+470    	; 0x214 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e9 c0       	rjmp	.+466    	; 0x214 <__bad_interrupt>
      42:	00 00       	nop
      44:	df c2       	rjmp	.+1470   	; 0x604 <__vector_17>
      46:	00 00       	nop
      48:	e5 c0       	rjmp	.+458    	; 0x214 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e3 c0       	rjmp	.+454    	; 0x214 <__bad_interrupt>
      4e:	00 00       	nop
      50:	e1 c0       	rjmp	.+450    	; 0x214 <__bad_interrupt>
      52:	00 00       	nop
      54:	df c0       	rjmp	.+446    	; 0x214 <__bad_interrupt>
      56:	00 00       	nop
      58:	dd c0       	rjmp	.+442    	; 0x214 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	db c0       	rjmp	.+438    	; 0x214 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d9 c0       	rjmp	.+434    	; 0x214 <__bad_interrupt>
      62:	00 00       	nop
      64:	d7 c0       	rjmp	.+430    	; 0x214 <__bad_interrupt>
      66:	00 00       	nop
      68:	d5 c0       	rjmp	.+426    	; 0x214 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d3 c0       	rjmp	.+422    	; 0x214 <__bad_interrupt>
      6e:	00 00       	nop
      70:	d1 c0       	rjmp	.+418    	; 0x214 <__bad_interrupt>
      72:	00 00       	nop
      74:	cf c0       	rjmp	.+414    	; 0x214 <__bad_interrupt>
      76:	00 00       	nop
      78:	cd c0       	rjmp	.+410    	; 0x214 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	cb c0       	rjmp	.+406    	; 0x214 <__bad_interrupt>
      7e:	00 00       	nop
      80:	b3 c2       	rjmp	.+1382   	; 0x5e8 <__vector_32>
      82:	00 00       	nop
      84:	c7 c0       	rjmp	.+398    	; 0x214 <__bad_interrupt>
      86:	00 00       	nop
      88:	c5 c0       	rjmp	.+394    	; 0x214 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c3 c0       	rjmp	.+390    	; 0x214 <__bad_interrupt>
      8e:	00 00       	nop
      90:	c1 c0       	rjmp	.+386    	; 0x214 <__bad_interrupt>
      92:	00 00       	nop
      94:	bf c0       	rjmp	.+382    	; 0x214 <__bad_interrupt>
      96:	00 00       	nop
      98:	bd c0       	rjmp	.+378    	; 0x214 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	bb c0       	rjmp	.+374    	; 0x214 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	b9 c0       	rjmp	.+370    	; 0x214 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b7 c0       	rjmp	.+366    	; 0x214 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b5 c0       	rjmp	.+362    	; 0x214 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b3 c0       	rjmp	.+358    	; 0x214 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b1 c0       	rjmp	.+354    	; 0x214 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	af c0       	rjmp	.+350    	; 0x214 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ad c0       	rjmp	.+346    	; 0x214 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ab c0       	rjmp	.+342    	; 0x214 <__bad_interrupt>
      be:	00 00       	nop
      c0:	a9 c0       	rjmp	.+338    	; 0x214 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a7 c0       	rjmp	.+334    	; 0x214 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a5 c0       	rjmp	.+330    	; 0x214 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a3 c0       	rjmp	.+326    	; 0x214 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a1 c0       	rjmp	.+322    	; 0x214 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	9f c0       	rjmp	.+318    	; 0x214 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9d c0       	rjmp	.+314    	; 0x214 <__bad_interrupt>
      da:	00 00       	nop
      dc:	9b c0       	rjmp	.+310    	; 0x214 <__bad_interrupt>
      de:	00 00       	nop
      e0:	99 c0       	rjmp	.+306    	; 0x214 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	80 01       	movw	r16, r0
      e6:	88 01       	movw	r16, r16
      e8:	88 01       	movw	r16, r16
      ea:	88 01       	movw	r16, r16
      ec:	82 01       	movw	r16, r4
      ee:	88 01       	movw	r16, r16
      f0:	84 01       	movw	r16, r8
      f2:	86 01       	movw	r16, r12
      f4:	88 01       	movw	r16, r16
      f6:	88 01       	movw	r16, r16
      f8:	88 01       	movw	r16, r16
      fa:	88 01       	movw	r16, r16
      fc:	88 01       	movw	r16, r16
      fe:	88 01       	movw	r16, r16
     100:	88 01       	movw	r16, r16
     102:	88 01       	movw	r16, r16
     104:	88 01       	movw	r16, r16
     106:	88 01       	movw	r16, r16
     108:	88 01       	movw	r16, r16
     10a:	88 01       	movw	r16, r16
     10c:	88 01       	movw	r16, r16
     10e:	88 01       	movw	r16, r16
     110:	88 01       	movw	r16, r16
     112:	88 01       	movw	r16, r16
     114:	88 01       	movw	r16, r16
     116:	88 01       	movw	r16, r16
     118:	88 01       	movw	r16, r16
     11a:	88 01       	movw	r16, r16
     11c:	88 01       	movw	r16, r16
     11e:	88 01       	movw	r16, r16
     120:	88 01       	movw	r16, r16
     122:	88 01       	movw	r16, r16
     124:	88 01       	movw	r16, r16
     126:	88 01       	movw	r16, r16
     128:	88 01       	movw	r16, r16
     12a:	88 01       	movw	r16, r16
     12c:	88 01       	movw	r16, r16
     12e:	88 01       	movw	r16, r16
     130:	88 01       	movw	r16, r16
     132:	88 01       	movw	r16, r16
     134:	88 01       	movw	r16, r16
     136:	88 01       	movw	r16, r16
     138:	88 01       	movw	r16, r16
     13a:	88 01       	movw	r16, r16
     13c:	88 01       	movw	r16, r16
     13e:	88 01       	movw	r16, r16
     140:	88 01       	movw	r16, r16
     142:	88 01       	movw	r16, r16
     144:	88 01       	movw	r16, r16
     146:	88 01       	movw	r16, r16
     148:	88 01       	movw	r16, r16
     14a:	88 01       	movw	r16, r16
     14c:	88 01       	movw	r16, r16
     14e:	88 01       	movw	r16, r16
     150:	88 01       	movw	r16, r16
     152:	88 01       	movw	r16, r16
     154:	88 01       	movw	r16, r16
     156:	88 01       	movw	r16, r16
     158:	88 01       	movw	r16, r16
     15a:	88 01       	movw	r16, r16
     15c:	88 01       	movw	r16, r16
     15e:	88 01       	movw	r16, r16
     160:	88 01       	movw	r16, r16
     162:	88 01       	movw	r16, r16
     164:	78 01       	movw	r14, r16
     166:	88 01       	movw	r16, r16
     168:	88 01       	movw	r16, r16
     16a:	88 01       	movw	r16, r16
     16c:	7a 01       	movw	r14, r20
     16e:	88 01       	movw	r16, r16
     170:	7c 01       	movw	r14, r24
     172:	7e 01       	movw	r14, r28
     174:	88 01       	movw	r16, r16
     176:	88 01       	movw	r16, r16
     178:	88 01       	movw	r16, r16
     17a:	88 01       	movw	r16, r16
     17c:	88 01       	movw	r16, r16
     17e:	88 01       	movw	r16, r16
     180:	88 01       	movw	r16, r16
     182:	88 01       	movw	r16, r16
     184:	88 01       	movw	r16, r16
     186:	88 01       	movw	r16, r16
     188:	88 01       	movw	r16, r16
     18a:	88 01       	movw	r16, r16
     18c:	88 01       	movw	r16, r16
     18e:	88 01       	movw	r16, r16
     190:	88 01       	movw	r16, r16
     192:	88 01       	movw	r16, r16
     194:	88 01       	movw	r16, r16
     196:	88 01       	movw	r16, r16
     198:	88 01       	movw	r16, r16
     19a:	88 01       	movw	r16, r16
     19c:	88 01       	movw	r16, r16
     19e:	88 01       	movw	r16, r16
     1a0:	88 01       	movw	r16, r16
     1a2:	88 01       	movw	r16, r16
     1a4:	70 01       	movw	r14, r0
     1a6:	88 01       	movw	r16, r16
     1a8:	88 01       	movw	r16, r16
     1aa:	88 01       	movw	r16, r16
     1ac:	72 01       	movw	r14, r4
     1ae:	88 01       	movw	r16, r16
     1b0:	74 01       	movw	r14, r8
     1b2:	76 01       	movw	r14, r12
     1b4:	88 01       	movw	r16, r16
     1b6:	88 01       	movw	r16, r16
     1b8:	88 01       	movw	r16, r16
     1ba:	88 01       	movw	r16, r16
     1bc:	88 01       	movw	r16, r16
     1be:	88 01       	movw	r16, r16
     1c0:	88 01       	movw	r16, r16
     1c2:	88 01       	movw	r16, r16
     1c4:	6a 01       	movw	r12, r20
     1c6:	88 01       	movw	r16, r16
     1c8:	88 01       	movw	r16, r16
     1ca:	88 01       	movw	r16, r16
     1cc:	8a 01       	movw	r16, r20
     1ce:	88 01       	movw	r16, r16
     1d0:	6c 01       	movw	r12, r24
     1d2:	6e 01       	movw	r12, r28

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d1 e2       	ldi	r29, 0x21	; 33
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	00 e0       	ldi	r16, 0x00	; 0
     1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
     1e4:	13 e0       	ldi	r17, 0x03	; 3
     1e6:	a0 e0       	ldi	r26, 0x00	; 0
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	ea e6       	ldi	r30, 0x6A	; 106
     1ec:	f3 e1       	ldi	r31, 0x13	; 19
     1ee:	00 e0       	ldi	r16, 0x00	; 0
     1f0:	0b bf       	out	0x3b, r16	; 59
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
     1f4:	07 90       	elpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	ac 36       	cpi	r26, 0x6C	; 108
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
     1fe:	23 e0       	ldi	r18, 0x03	; 3
     200:	ac e6       	ldi	r26, 0x6C	; 108
     202:	b3 e0       	ldi	r27, 0x03	; 3
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a6 37       	cpi	r26, 0x76	; 118
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
     20e:	6f d4       	rcall	.+2270   	; 0xaee <main>
     210:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

00000214 <__bad_interrupt>:
     214:	f5 ce       	rjmp	.-534    	; 0x0 <__vectors>

00000216 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     216:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
     218:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     21a:	10 c0       	rjmp	.+32     	; 0x23c <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
     21c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	e9 ef       	ldi	r30, 0xF9	; 249
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <keypad_ScanKey+0xe>
     228:	00 c0       	rjmp	.+0      	; 0x22a <keypad_ScanKey+0x14>
     22a:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
     22c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     230:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
     232:	8f 30       	cpi	r24, 0x0F	; 15
     234:	29 f4       	brne	.+10     	; 0x240 <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
     236:	99 0f       	add	r25, r25
     238:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	24 30       	cpi	r18, 0x04	; 4
     23e:	70 f3       	brcs	.-36     	; 0x21c <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
     240:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
     242:	89 0f       	add	r24, r25
     244:	08 95       	ret

00000246 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
     24c:	08 95       	ret

0000024e <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     24e:	8f e0       	ldi	r24, 0x0F	; 15
     250:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
     254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     258:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
     25a:	8f 30       	cpi	r24, 0x0F	; 15
     25c:	c1 f7       	brne	.-16     	; 0x24e <KEYPAD_WaitForKeyRelease>
     25e:	89 ef       	ldi	r24, 0xF9	; 249
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <KEYPAD_WaitForKeyRelease+0x14>
     266:	00 c0       	rjmp	.+0      	; 0x268 <KEYPAD_WaitForKeyRelease+0x1a>
     268:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
     26a:	8f e0       	ldi	r24, 0x0F	; 15
     26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
     270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     274:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
     276:	8f 30       	cpi	r24, 0x0F	; 15
     278:	51 f7       	brne	.-44     	; 0x24e <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
     27a:	08 95       	ret

0000027c <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
     27c:	8f e0       	ldi	r24, 0x0F	; 15
     27e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
     282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     286:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
     288:	8f 30       	cpi	r24, 0x0F	; 15
     28a:	c1 f3       	breq	.-16     	; 0x27c <KEYPAD_WaitForKeyPress>
     28c:	89 ef       	ldi	r24, 0xF9	; 249
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <KEYPAD_WaitForKeyPress+0x14>
     294:	00 c0       	rjmp	.+0      	; 0x296 <KEYPAD_WaitForKeyPress+0x1a>
     296:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
     29e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
     2a2:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
     2a4:	8f 30       	cpi	r24, 0x0F	; 15
     2a6:	51 f3       	breq	.-44     	; 0x27c <KEYPAD_WaitForKeyPress>
}
     2a8:	08 95       	ret

000002aa <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
     2aa:	d1 df       	rcall	.-94     	; 0x24e <KEYPAD_WaitForKeyRelease>
     2ac:	89 ef       	ldi	r24, 0xF9	; 249
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <KEYPAD_GetKey+0x6>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
     2b6:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
     2b8:	e1 df       	rcall	.-62     	; 0x27c <KEYPAD_WaitForKeyPress>
     2ba:	ad df       	rcall	.-166    	; 0x216 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	e7 57       	subi	r30, 0x77	; 119
     2c2:	f1 09       	sbc	r31, r1
     2c4:	e8 37       	cpi	r30, 0x78	; 120
     2c6:	f1 05       	cpc	r31, r1
     2c8:	18 f5       	brcc	.+70     	; 0x310 <KEYPAD_GetKey+0x66>
     2ca:	88 27       	eor	r24, r24
     2cc:	ee 58       	subi	r30, 0x8E	; 142
     2ce:	ff 4f       	sbci	r31, 0xFF	; 255
     2d0:	8f 4f       	sbci	r24, 0xFF	; 255
     2d2:	5e c5       	rjmp	.+2748   	; 0xd90 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
     2d4:	8a e2       	ldi	r24, 0x2A	; 42
     2d6:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
     2d8:	84 e3       	ldi	r24, 0x34	; 52
     2da:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
     2dc:	81 e3       	ldi	r24, 0x31	; 49
     2de:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
     2e4:	88 e3       	ldi	r24, 0x38	; 56
     2e6:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
     2e8:	85 e3       	ldi	r24, 0x35	; 53
     2ea:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
     2ec:	82 e3       	ldi	r24, 0x32	; 50
     2ee:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
     2f0:	83 e2       	ldi	r24, 0x23	; 35
     2f2:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
     2f4:	89 e3       	ldi	r24, 0x39	; 57
     2f6:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
     2f8:	86 e3       	ldi	r24, 0x36	; 54
     2fa:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
     2fc:	83 e3       	ldi	r24, 0x33	; 51
     2fe:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
     300:	84 e4       	ldi	r24, 0x44	; 68
     302:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
     304:	83 e4       	ldi	r24, 0x43	; 67
     306:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
     30c:	81 e4       	ldi	r24, 0x41	; 65
     30e:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
     314:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
     316:	08 95       	ret

00000318 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
     318:	85 b1       	in	r24, 0x05	; 5
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	85 b9       	out	0x05, r24	; 5
     31e:	00 00       	nop
     320:	85 b1       	in	r24, 0x05	; 5
     322:	8f 7d       	andi	r24, 0xDF	; 223
     324:	85 b9       	out	0x05, r24	; 5
     326:	08 95       	ret

00000328 <lcd_write>:
     328:	cf 93       	push	r28
     32a:	c8 2f       	mov	r28, r24
     32c:	66 23       	and	r22, r22
     32e:	31 f0       	breq	.+12     	; 0x33c <lcd_write+0x14>
     330:	e2 e0       	ldi	r30, 0x02	; 2
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	80 81       	ld	r24, Z
     336:	80 64       	ori	r24, 0x40	; 64
     338:	80 83       	st	Z, r24
     33a:	05 c0       	rjmp	.+10     	; 0x346 <lcd_write+0x1e>
     33c:	e2 e0       	ldi	r30, 0x02	; 2
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	80 81       	ld	r24, Z
     342:	8f 7b       	andi	r24, 0xBF	; 191
     344:	80 83       	st	Z, r24
     346:	85 b1       	in	r24, 0x05	; 5
     348:	8f 7e       	andi	r24, 0xEF	; 239
     34a:	85 b9       	out	0x05, r24	; 5
     34c:	8d b1       	in	r24, 0x0d	; 13
     34e:	80 61       	ori	r24, 0x10	; 16
     350:	8d b9       	out	0x0d, r24	; 13
     352:	8d b1       	in	r24, 0x0d	; 13
     354:	80 62       	ori	r24, 0x20	; 32
     356:	8d b9       	out	0x0d, r24	; 13
     358:	83 b3       	in	r24, 0x13	; 19
     35a:	80 62       	ori	r24, 0x20	; 32
     35c:	83 bb       	out	0x13, r24	; 19
     35e:	e1 e0       	ldi	r30, 0x01	; 1
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	80 81       	ld	r24, Z
     364:	88 60       	ori	r24, 0x08	; 8
     366:	80 83       	st	Z, r24
     368:	e2 e0       	ldi	r30, 0x02	; 2
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	80 81       	ld	r24, Z
     36e:	87 7f       	andi	r24, 0xF7	; 247
     370:	80 83       	st	Z, r24
     372:	84 b3       	in	r24, 0x14	; 20
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	84 bb       	out	0x14, r24	; 20
     378:	8e b1       	in	r24, 0x0e	; 14
     37a:	8f 7d       	andi	r24, 0xDF	; 223
     37c:	8e b9       	out	0x0e, r24	; 14
     37e:	8e b1       	in	r24, 0x0e	; 14
     380:	8f 7e       	andi	r24, 0xEF	; 239
     382:	8e b9       	out	0x0e, r24	; 14
     384:	cc 23       	and	r28, r28
     386:	1c f4       	brge	.+6      	; 0x38e <lcd_write+0x66>
     388:	80 81       	ld	r24, Z
     38a:	88 60       	ori	r24, 0x08	; 8
     38c:	80 83       	st	Z, r24
     38e:	c6 ff       	sbrs	r28, 6
     390:	03 c0       	rjmp	.+6      	; 0x398 <lcd_write+0x70>
     392:	84 b3       	in	r24, 0x14	; 20
     394:	80 62       	ori	r24, 0x20	; 32
     396:	84 bb       	out	0x14, r24	; 20
     398:	c5 ff       	sbrs	r28, 5
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <lcd_write+0x7a>
     39c:	8e b1       	in	r24, 0x0e	; 14
     39e:	80 62       	ori	r24, 0x20	; 32
     3a0:	8e b9       	out	0x0e, r24	; 14
     3a2:	c4 ff       	sbrs	r28, 4
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <lcd_write+0x84>
     3a6:	8e b1       	in	r24, 0x0e	; 14
     3a8:	80 61       	ori	r24, 0x10	; 16
     3aa:	8e b9       	out	0x0e, r24	; 14
     3ac:	b5 df       	rcall	.-150    	; 0x318 <toggle_e>
     3ae:	e2 e0       	ldi	r30, 0x02	; 2
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	80 81       	ld	r24, Z
     3b4:	87 7f       	andi	r24, 0xF7	; 247
     3b6:	80 83       	st	Z, r24
     3b8:	84 b3       	in	r24, 0x14	; 20
     3ba:	8f 7d       	andi	r24, 0xDF	; 223
     3bc:	84 bb       	out	0x14, r24	; 20
     3be:	8e b1       	in	r24, 0x0e	; 14
     3c0:	8f 7d       	andi	r24, 0xDF	; 223
     3c2:	8e b9       	out	0x0e, r24	; 14
     3c4:	8e b1       	in	r24, 0x0e	; 14
     3c6:	8f 7e       	andi	r24, 0xEF	; 239
     3c8:	8e b9       	out	0x0e, r24	; 14
     3ca:	c3 ff       	sbrs	r28, 3
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <lcd_write+0xac>
     3ce:	80 81       	ld	r24, Z
     3d0:	88 60       	ori	r24, 0x08	; 8
     3d2:	80 83       	st	Z, r24
     3d4:	c2 ff       	sbrs	r28, 2
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <lcd_write+0xb6>
     3d8:	84 b3       	in	r24, 0x14	; 20
     3da:	80 62       	ori	r24, 0x20	; 32
     3dc:	84 bb       	out	0x14, r24	; 20
     3de:	c1 ff       	sbrs	r28, 1
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <lcd_write+0xc0>
     3e2:	8e b1       	in	r24, 0x0e	; 14
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	8e b9       	out	0x0e, r24	; 14
     3e8:	c0 ff       	sbrs	r28, 0
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <lcd_write+0xca>
     3ec:	8e b1       	in	r24, 0x0e	; 14
     3ee:	80 61       	ori	r24, 0x10	; 16
     3f0:	8e b9       	out	0x0e, r24	; 14
     3f2:	92 df       	rcall	.-220    	; 0x318 <toggle_e>
     3f4:	8e b1       	in	r24, 0x0e	; 14
     3f6:	80 61       	ori	r24, 0x10	; 16
     3f8:	8e b9       	out	0x0e, r24	; 14
     3fa:	8e b1       	in	r24, 0x0e	; 14
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	8e b9       	out	0x0e, r24	; 14
     400:	84 b3       	in	r24, 0x14	; 20
     402:	80 62       	ori	r24, 0x20	; 32
     404:	84 bb       	out	0x14, r24	; 20
     406:	e2 e0       	ldi	r30, 0x02	; 2
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	80 81       	ld	r24, Z
     40c:	88 60       	ori	r24, 0x08	; 8
     40e:	80 83       	st	Z, r24
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <lcd_read>:
     414:	88 23       	and	r24, r24
     416:	31 f0       	breq	.+12     	; 0x424 <lcd_read+0x10>
     418:	e2 e0       	ldi	r30, 0x02	; 2
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
     422:	05 c0       	rjmp	.+10     	; 0x42e <lcd_read+0x1a>
     424:	e2 e0       	ldi	r30, 0x02	; 2
     426:	f1 e0       	ldi	r31, 0x01	; 1
     428:	80 81       	ld	r24, Z
     42a:	8f 7b       	andi	r24, 0xBF	; 191
     42c:	80 83       	st	Z, r24
     42e:	85 b1       	in	r24, 0x05	; 5
     430:	80 61       	ori	r24, 0x10	; 16
     432:	85 b9       	out	0x05, r24	; 5
     434:	8d b1       	in	r24, 0x0d	; 13
     436:	8f 7e       	andi	r24, 0xEF	; 239
     438:	8d b9       	out	0x0d, r24	; 13
     43a:	8d b1       	in	r24, 0x0d	; 13
     43c:	8f 7d       	andi	r24, 0xDF	; 223
     43e:	8d b9       	out	0x0d, r24	; 13
     440:	83 b3       	in	r24, 0x13	; 19
     442:	8f 7d       	andi	r24, 0xDF	; 223
     444:	83 bb       	out	0x13, r24	; 19
     446:	e1 e0       	ldi	r30, 0x01	; 1
     448:	f1 e0       	ldi	r31, 0x01	; 1
     44a:	80 81       	ld	r24, Z
     44c:	87 7f       	andi	r24, 0xF7	; 247
     44e:	80 83       	st	Z, r24
     450:	85 b1       	in	r24, 0x05	; 5
     452:	80 62       	ori	r24, 0x20	; 32
     454:	85 b9       	out	0x05, r24	; 5
     456:	00 00       	nop
     458:	64 99       	sbic	0x0c, 4	; 12
     45a:	02 c0       	rjmp	.+4      	; 0x460 <lcd_read+0x4c>
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	01 c0       	rjmp	.+2      	; 0x462 <lcd_read+0x4e>
     460:	80 e1       	ldi	r24, 0x10	; 16
     462:	65 99       	sbic	0x0c, 5	; 12
     464:	80 62       	ori	r24, 0x20	; 32
     466:	95 99       	sbic	0x12, 5	; 18
     468:	80 64       	ori	r24, 0x40	; 64
     46a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     46e:	93 fd       	sbrc	r25, 3
     470:	80 68       	ori	r24, 0x80	; 128
     472:	95 b1       	in	r25, 0x05	; 5
     474:	9f 7d       	andi	r25, 0xDF	; 223
     476:	95 b9       	out	0x05, r25	; 5
     478:	00 00       	nop
     47a:	95 b1       	in	r25, 0x05	; 5
     47c:	90 62       	ori	r25, 0x20	; 32
     47e:	95 b9       	out	0x05, r25	; 5
     480:	00 00       	nop
     482:	64 99       	sbic	0x0c, 4	; 12
     484:	81 60       	ori	r24, 0x01	; 1
     486:	65 99       	sbic	0x0c, 5	; 12
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	95 99       	sbic	0x12, 5	; 18
     48c:	84 60       	ori	r24, 0x04	; 4
     48e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
     492:	93 fd       	sbrc	r25, 3
     494:	88 60       	ori	r24, 0x08	; 8
     496:	95 b1       	in	r25, 0x05	; 5
     498:	9f 7d       	andi	r25, 0xDF	; 223
     49a:	95 b9       	out	0x05, r25	; 5
     49c:	08 95       	ret

0000049e <lcd_waitbusy>:
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	b9 df       	rcall	.-142    	; 0x414 <lcd_read>
     4a2:	88 23       	and	r24, r24
     4a4:	e4 f3       	brlt	.-8      	; 0x49e <lcd_waitbusy>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_waitbusy+0xa>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_waitbusy+0xc>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	b3 cf       	rjmp	.-154    	; 0x414 <lcd_read>
     4ae:	08 95       	ret

000004b0 <lcd_command>:
     4b0:	cf 93       	push	r28
     4b2:	c8 2f       	mov	r28, r24
     4b4:	f4 df       	rcall	.-24     	; 0x49e <lcd_waitbusy>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	8c 2f       	mov	r24, r28
     4ba:	36 df       	rcall	.-404    	; 0x328 <lcd_write>
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <lcd_gotoxy>:
     4c0:	61 11       	cpse	r22, r1
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <lcd_gotoxy+0xa>
     4c4:	80 58       	subi	r24, 0x80	; 128
     4c6:	f4 cf       	rjmp	.-24     	; 0x4b0 <lcd_command>
     4c8:	08 95       	ret
     4ca:	80 54       	subi	r24, 0x40	; 64
     4cc:	f1 cf       	rjmp	.-30     	; 0x4b0 <lcd_command>
     4ce:	08 95       	ret

000004d0 <lcd_clrscr>:
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	ee cf       	rjmp	.-36     	; 0x4b0 <lcd_command>
     4d4:	08 95       	ret

000004d6 <lcd_home>:
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	eb cf       	rjmp	.-42     	; 0x4b0 <lcd_command>
     4da:	08 95       	ret

000004dc <lcd_putc>:
     4dc:	cf 93       	push	r28
     4de:	c8 2f       	mov	r28, r24
     4e0:	de df       	rcall	.-68     	; 0x49e <lcd_waitbusy>
     4e2:	ca 30       	cpi	r28, 0x0A	; 10
     4e4:	41 f4       	brne	.+16     	; 0x4f6 <lcd_putc+0x1a>
     4e6:	80 34       	cpi	r24, 0x40	; 64
     4e8:	10 f4       	brcc	.+4      	; 0x4ee <lcd_putc+0x12>
     4ea:	80 e4       	ldi	r24, 0x40	; 64
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <lcd_putc+0x14>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	80 58       	subi	r24, 0x80	; 128
     4f2:	de df       	rcall	.-68     	; 0x4b0 <lcd_command>
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <lcd_putc+0x20>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	8c 2f       	mov	r24, r28
     4fa:	16 df       	rcall	.-468    	; 0x328 <lcd_write>
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <lcd_puts>:
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	fc 01       	movw	r30, r24
     506:	02 c0       	rjmp	.+4      	; 0x50c <lcd_puts+0xc>
     508:	e9 df       	rcall	.-46     	; 0x4dc <lcd_putc>
     50a:	fe 01       	movw	r30, r28
     50c:	ef 01       	movw	r28, r30
     50e:	21 96       	adiw	r28, 0x01	; 1
     510:	80 81       	ld	r24, Z
     512:	81 11       	cpse	r24, r1
     514:	f9 cf       	rjmp	.-14     	; 0x508 <lcd_puts+0x8>
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     51c:	cf 93       	push	r28
     51e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     520:	e1 e0       	ldi	r30, 0x01	; 1
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	80 81       	ld	r24, Z
     526:	80 64       	ori	r24, 0x40	; 64
     528:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     52a:	84 b1       	in	r24, 0x04	; 4
     52c:	80 61       	ori	r24, 0x10	; 16
     52e:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     530:	84 b1       	in	r24, 0x04	; 4
     532:	80 62       	ori	r24, 0x20	; 32
     534:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     536:	8d b1       	in	r24, 0x0d	; 13
     538:	80 61       	ori	r24, 0x10	; 16
     53a:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     53c:	8d b1       	in	r24, 0x0d	; 13
     53e:	80 62       	ori	r24, 0x20	; 32
     540:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     542:	83 b3       	in	r24, 0x13	; 19
     544:	80 62       	ori	r24, 0x20	; 32
     546:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     548:	80 81       	ld	r24, Z
     54a:	88 60       	ori	r24, 0x08	; 8
     54c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54e:	8f e9       	ldi	r24, 0x9F	; 159
     550:	9f e0       	ldi	r25, 0x0F	; 15
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <lcd_init+0x36>
     556:	00 c0       	rjmp	.+0      	; 0x558 <lcd_init+0x3c>
     558:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     55a:	8e b1       	in	r24, 0x0e	; 14
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	8e b9       	out	0x0e, r24	; 14
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     560:	8e b1       	in	r24, 0x0e	; 14
     562:	80 61       	ori	r24, 0x10	; 16
     564:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
     566:	d8 de       	rcall	.-592    	; 0x318 <toggle_e>
     568:	81 ee       	ldi	r24, 0xE1	; 225
     56a:	94 e0       	ldi	r25, 0x04	; 4
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <lcd_init+0x50>
     570:	00 c0       	rjmp	.+0      	; 0x572 <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     572:	00 00       	nop
     574:	d1 de       	rcall	.-606    	; 0x318 <toggle_e>
     576:	95 e1       	ldi	r25, 0x15	; 21
     578:	9a 95       	dec	r25
     57a:	f1 f7       	brne	.-4      	; 0x578 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     57c:	00 00       	nop
     57e:	cc de       	rcall	.-616    	; 0x318 <toggle_e>
     580:	85 e1       	ldi	r24, 0x15	; 21
     582:	8a 95       	dec	r24
     584:	f1 f7       	brne	.-4      	; 0x582 <lcd_init+0x66>
     586:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     588:	8e b1       	in	r24, 0x0e	; 14
     58a:	8f 7e       	andi	r24, 0xEF	; 239
    lcd_e_toggle();
     58c:	8e b9       	out	0x0e, r24	; 14
     58e:	c4 de       	rcall	.-632    	; 0x318 <toggle_e>
     590:	95 e1       	ldi	r25, 0x15	; 21
     592:	9a 95       	dec	r25
     594:	f1 f7       	brne	.-4      	; 0x592 <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     596:	00 00       	nop
     598:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     59a:	8a df       	rcall	.-236    	; 0x4b0 <lcd_command>
     59c:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
     59e:	88 df       	rcall	.-240    	; 0x4b0 <lcd_command>
     5a0:	97 df       	rcall	.-210    	; 0x4d0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	85 df       	rcall	.-246    	; 0x4b0 <lcd_command>
     5a6:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
     5a8:	83 df       	rcall	.-250    	; 0x4b0 <lcd_command>
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <USART_init>:
// Communication functions for SPI
static void 
USART_init(uint16_t ubrr) 
{
	/* Set baud rate in the USART Baud Rate Registers (UBRR) */
	UBRR0H = (unsigned char) (ubrr >> 8);
     5ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) ubrr;
     5b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	/* Enable receiver and transmitter on RX0 and TX0 */
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega2560 has 4 UARTs: 0,1,2,3
     5b6:	e1 ec       	ldi	r30, 0xC1	; 193
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	88 61       	ori	r24, 0x18	; 24
     5be:	80 83       	st	Z, r24
	
	/* Set frame format: 8 bit data, 2 stop bit */
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
     5c0:	e2 ec       	ldi	r30, 0xC2	; 194
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	8e 60       	ori	r24, 0x0E	; 14
     5c8:	80 83       	st	Z, r24
     5ca:	08 95       	ret

000005cc <USART_Transmit>:

static void
USART_Transmit(unsigned char data, FILE *stream) 
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0))) 
     5cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     5d0:	95 ff       	sbrs	r25, 5
     5d2:	fc cf       	rjmp	.-8      	; 0x5cc <USART_Transmit>
	{
		;
	}
	/* Puts the data into a buffer, then sends/transmits the data */
	UDR0 = data;
     5d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     5d8:	08 95       	ret

000005da <USART_Receive>:

static char 
USART_Receive(FILE *stream) 
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0))) 
     5da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     5de:	85 ff       	sbrs	r24, 5
     5e0:	fc cf       	rjmp	.-8      	; 0x5da <USART_Receive>
	{
		;
	}
	/* Get the received data from the buffer */
	return UDR0;
     5e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
     5e6:	08 95       	ret

000005e8 <__vector_32>:

// Timer 3 for buzzer interrupt function
/* timer/counter1 compare match A interrupt vector */
 ISR 
 (TIMER3_COMPA_vect) 
 {
     5e8:	1f 92       	push	r1
     5ea:	0f 92       	push	r0
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	0f 92       	push	r0
     5f0:	11 24       	eor	r1, r1
     TCNT3 = 0; // reset timer counter
     5f2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     5f6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
 }
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <__vector_17>:

// Timer 1 interrupt function for timeout
ISR
(TIMER1_COMPA_vect)
{ 
     604:	1f 92       	push	r1
     606:	0f 92       	push	r0
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	0f 92       	push	r0
     60c:	11 24       	eor	r1, r1
     60e:	0b b6       	in	r0, 0x3b	; 59
     610:	0f 92       	push	r0
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
	lcd_clrscr();
     62a:	52 df       	rcall	.-348    	; 0x4d0 <lcd_clrscr>
	lcd_home();
     62c:	54 df       	rcall	.-344    	; 0x4d6 <lcd_home>
     62e:	84 e2       	ldi	r24, 0x24	; 36
	lcd_puts("Timeout occurred!");
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	66 df       	rcall	.-308    	; 0x500 <lcd_puts>
     634:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     636:	87 ea       	ldi	r24, 0xA7	; 167
     638:	91 e6       	ldi	r25, 0x61	; 97
     63a:	21 50       	subi	r18, 0x01	; 1
     63c:	80 40       	sbci	r24, 0x00	; 0
     63e:	90 40       	sbci	r25, 0x00	; 0
     640:	e1 f7       	brne	.-8      	; 0x63a <__vector_17+0x36>
     642:	00 c0       	rjmp	.+0      	; 0x644 <__vector_17+0x40>
     644:	00 00       	nop
	_delay_ms(2000);
	
	lcd_clrscr();
     646:	44 df       	rcall	.-376    	; 0x4d0 <lcd_clrscr>
	lcd_puts("Enter Password:");
     648:	86 e3       	ldi	r24, 0x36	; 54
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	59 df       	rcall	.-334    	; 0x500 <lcd_puts>
	lcd_gotoxy(0,1);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	36 df       	rcall	.-404    	; 0x4c0 <lcd_gotoxy>
     654:	81 e0       	ldi	r24, 0x01	; 1
	
	timeout = 1;
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <timeout+0x1>
     65c:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <timeout>
     660:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
	TCNT1 = 0;
     664:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     668:	ef e6       	ldi	r30, 0x6F	; 111
	TIMSK1 &= ~(1 << OCIE1A);
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	8d 7f       	andi	r24, 0xFD	; 253
     670:	80 83       	st	Z, r24
     672:	ff 91       	pop	r31
}
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <init_timer>:
     698:	f8 94       	cli
void 
init_timer() 
{
	cli(); //stop interrupts
	
	TCCR1A = 0; // set entire TCCR1A register to 0
     69a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0; // same for TCCR1B
     69e:	e1 e8       	ldi	r30, 0x81	; 129
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	10 82       	st	Z, r1
	TCNT1  = 0; // initialize counter value to 0
     6a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     6a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	// set compare match register for 1hz increments
	OCR1A = 65535; // = (16*10^6) / (1*1024) - 1 (must be <65536)
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	9f ef       	ldi	r25, 0xFF	; 255
     6b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     6b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	// turn on CTC mode
	TCCR1B |= (1 << WGM12);
     6b8:	80 81       	ld	r24, Z
     6ba:	88 60       	ori	r24, 0x08	; 8
     6bc:	80 83       	st	Z, r24
	// Set CS10 and CS12 bits for 1024 prescaler
	TCCR1B |= (1 << CS12) | (1 << CS10);
     6be:	80 81       	ld	r24, Z
     6c0:	85 60       	ori	r24, 0x05	; 5
     6c2:	80 83       	st	Z, r24
	// enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
     6c4:	ef e6       	ldi	r30, 0x6F	; 111
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	82 60       	ori	r24, 0x02	; 2
     6cc:	80 83       	st	Z, r24
	
	// Enable interrupts command
	sei();
     6ce:	78 94       	sei
     6d0:	08 95       	ret

000006d2 <init_buzzer>:
// Function to initializing the buzzer
void 
init_buzzer() 
{
	    /* set up the ports and pins */
	    DDRE |= (1 << PE3); // OC3A is located in digital pin 5
     6d2:	8d b1       	in	r24, 0x0d	; 13
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	8d b9       	out	0x0d, r24	; 13
		
	    // Enable interrupts command
	    sei();
     6d8:	78 94       	sei
		
	    TCNT1 = 0;
     6da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     6de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	    TIMSK1 &= ~(1 << OCIE1A);
     6e2:	ef e6       	ldi	r30, 0x6F	; 111
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	8d 7f       	andi	r24, 0xFD	; 253
     6ea:	80 83       	st	Z, r24
		
	    /* set up the 16-bit timer/counter3, mode 9 */
	    TCCR3B = 0; // reset timer/counter 3
     6ec:	a1 e9       	ldi	r26, 0x91	; 145
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	1c 92       	st	X, r1
	    TCNT3  = 0;
     6f2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     6f6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
	    TCCR3A |= (1 << 6); // set compare output mode to toggle
     6fa:	e0 e9       	ldi	r30, 0x90	; 144
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	80 64       	ori	r24, 0x40	; 64
     702:	80 83       	st	Z, r24

	    // mode 9 phase correct
	    TCCR3A |= (1 << 0); // set register A WGM[1:0] bits
     704:	80 81       	ld	r24, Z
     706:	81 60       	ori	r24, 0x01	; 1
     708:	80 83       	st	Z, r24
	    TCCR3B |= (1 << 4); // set register B WBM[3:2] bits
     70a:	8c 91       	ld	r24, X
     70c:	80 61       	ori	r24, 0x10	; 16
     70e:	8c 93       	st	X, r24
	    TIMSK3 |= (1 << 1); // enable compare match A interrupt
     710:	e1 e7       	ldi	r30, 0x71	; 113
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	82 60       	ori	r24, 0x02	; 2
     718:	80 83       	st	Z, r24
	    OCR3A = 2443;   // A7 3250 Hz, no prescaler, empirical
     71a:	8b e8       	ldi	r24, 0x8B	; 139
     71c:	99 e0       	ldi	r25, 0x09	; 9
     71e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
     722:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
     726:	08 95       	ret

00000728 <inputPassword>:
}

// Function for the input of current password
int 
inputPassword(char password[8]) 
{
     728:	ef 92       	push	r14
     72a:	ff 92       	push	r15
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	28 97       	sbiw	r28, 0x08	; 8
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	7c 01       	movw	r14, r24
	TCNT1 = 0;
     746:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     74a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIMSK1 &= ~(1 << OCIE1A);
     74e:	ef e6       	ldi	r30, 0x6F	; 111
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8d 7f       	andi	r24, 0xFD	; 253
     756:	80 83       	st	Z, r24
	int outcome = 0;
	
	int i = 0;
	char givenPassword[8] = "";
     758:	1a 82       	std	Y+2, r1	; 0x02
     75a:	19 82       	std	Y+1, r1	; 0x01
     75c:	fe 01       	movw	r30, r28
     75e:	33 96       	adiw	r30, 0x03	; 3
     760:	86 e0       	ldi	r24, 0x06	; 6
     762:	df 01       	movw	r26, r30
     764:	1d 92       	st	X+, r1
     766:	8a 95       	dec	r24
     768:	e9 f7       	brne	.-6      	; 0x764 <inputPassword+0x3c>
	uint8_t key;
	lcd_clrscr();
     76a:	b2 de       	rcall	.-668    	; 0x4d0 <lcd_clrscr>
	lcd_puts("Enter Password:");
     76c:	86 e3       	ldi	r24, 0x36	; 54
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	c7 de       	rcall	.-626    	; 0x500 <lcd_puts>
	lcd_gotoxy(0,1);
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	a4 de       	rcall	.-696    	; 0x4c0 <lcd_gotoxy>
{
	TCNT1 = 0;
	TIMSK1 &= ~(1 << OCIE1A);
	int outcome = 0;
	
	int i = 0;
     778:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t key;
	lcd_clrscr();
	lcd_puts("Enter Password:");
	lcd_gotoxy(0,1);

	while(i < 8) 
     77a:	10 e0       	ldi	r17, 0x00	; 0
	{
		init_timer();	
     77c:	b5 c0       	rjmp	.+362    	; 0x8e8 <inputPassword+0x1c0>
     77e:	8c df       	rcall	.-232    	; 0x698 <init_timer>
		
		key = KEYPAD_GetKey();
     780:	94 dd       	rcall	.-1240   	; 0x2aa <KEYPAD_GetKey>
     782:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <timeout>
		
		// If timeout has previously happened return to "Enter password"
		// section, with no user inputs given
		if (timeout != 0) 
     786:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <timeout+0x1>
     78a:	23 2b       	or	r18, r19
     78c:	31 f0       	breq	.+12     	; 0x79a <inputPassword+0x72>
     78e:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <timeout+0x1>
		{
			i = 0;
			timeout = 0;
     792:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <timeout>
     796:	00 e0       	ldi	r16, 0x00	; 0
		
		// If timeout has previously happened return to "Enter password"
		// section, with no user inputs given
		if (timeout != 0) 
		{
			i = 0;
     798:	10 e0       	ldi	r17, 0x00	; 0
     79a:	83 32       	cpi	r24, 0x23	; 35
			timeout = 0;
		}
		// keys 35 = #, 42 = *, 65 = A, 66 = B	REFERENCE: https://www.irongeek.com/alt-numpad-ascii-key-combos-and-chart.html
		if (key != 35 && key != 42 && key != 65 && key != 66) // Password is restricted to only numbers for simplicity
     79c:	09 f4       	brne	.+2      	; 0x7a0 <inputPassword+0x78>
     79e:	a4 c0       	rjmp	.+328    	; 0x8e8 <inputPassword+0x1c0>
     7a0:	8a 32       	cpi	r24, 0x2A	; 42
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <inputPassword+0x7e>
     7a4:	a1 c0       	rjmp	.+322    	; 0x8e8 <inputPassword+0x1c0>
     7a6:	81 34       	cpi	r24, 0x41	; 65
     7a8:	09 f4       	brne	.+2      	; 0x7ac <inputPassword+0x84>
     7aa:	9e c0       	rjmp	.+316    	; 0x8e8 <inputPassword+0x1c0>
     7ac:	82 34       	cpi	r24, 0x42	; 66
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <inputPassword+0x8a>
     7b0:	9b c0       	rjmp	.+310    	; 0x8e8 <inputPassword+0x1c0>
     7b2:	83 34       	cpi	r24, 0x43	; 67
		{ 
			
			// When C is pressed - C = 67
			if (key == 67) 
     7b4:	c1 f4       	brne	.+48     	; 0x7e6 <inputPassword+0xbe>
     7b6:	01 15       	cp	r16, r1
			{
				if (i != 0) 
     7b8:	11 05       	cpc	r17, r1
     7ba:	09 f4       	brne	.+2      	; 0x7be <inputPassword+0x96>
     7bc:	95 c0       	rjmp	.+298    	; 0x8e8 <inputPassword+0x1c0>
				{				
					lcd_gotoxy(i - 1,1);
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	80 0f       	add	r24, r16
     7c4:	7d de       	rcall	.-774    	; 0x4c0 <lcd_gotoxy>
					lcd_puts(" ");
     7c6:	86 e4       	ldi	r24, 0x46	; 70
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	9a de       	rcall	.-716    	; 0x500 <lcd_puts>
					i--;
     7cc:	01 50       	subi	r16, 0x01	; 1
     7ce:	11 09       	sbc	r17, r1
					lcd_gotoxy(i,1);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	80 2f       	mov	r24, r16
     7d4:	75 de       	rcall	.-790    	; 0x4c0 <lcd_gotoxy>
					
					if (i == 0) 
     7d6:	01 15       	cp	r16, r1
     7d8:	11 05       	cpc	r17, r1
     7da:	09 f0       	breq	.+2      	; 0x7de <inputPassword+0xb6>
     7dc:	85 c0       	rjmp	.+266    	; 0x8e8 <inputPassword+0x1c0>
					{
						lcd_gotoxy(0,1);
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	6e de       	rcall	.-804    	; 0x4c0 <lcd_gotoxy>
     7e4:	81 c0       	rjmp	.+258    	; 0x8e8 <inputPassword+0x1c0>
     7e6:	84 34       	cpi	r24, 0x44	; 68
				} 
				
			}
			// When D is pressed check if the current password and the given password match
			// D = 68
			else if (key == 68)
     7e8:	09 f0       	breq	.+2      	; 0x7ec <inputPassword+0xc4>
     7ea:	6b c0       	rjmp	.+214    	; 0x8c2 <inputPassword+0x19a>
     7ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
			{
				TCNT1 = 0;
     7f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     7f4:	ef e6       	ldi	r30, 0x6F	; 111
				TIMSK1 &= ~(1 << OCIE1A);
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	8d 7f       	andi	r24, 0xFD	; 253
     7fc:	80 83       	st	Z, r24
     7fe:	de 01       	movw	r26, r28
				
				// Checks if the length of the password exceeds 4 => Incorrect password
				// Since the maximum length of the password is limited to 4
				if (strlen(givenPassword) >= 5)
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	fd 01       	movw	r30, r26
     804:	01 90       	ld	r0, Z+
     806:	00 20       	and	r0, r0
     808:	e9 f7       	brne	.-6      	; 0x804 <inputPassword+0xdc>
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	ea 1b       	sub	r30, r26
     80e:	fb 0b       	sbc	r31, r27
				{
					lcd_clrscr();
     810:	35 97       	sbiw	r30, 0x05	; 5
					lcd_gotoxy(1, 0);
     812:	c8 f0       	brcs	.+50     	; 0x846 <inputPassword+0x11e>
     814:	5d de       	rcall	.-838    	; 0x4d0 <lcd_clrscr>
     816:	60 e0       	ldi	r22, 0x00	; 0
					lcd_puts("Given Password");
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	52 de       	rcall	.-860    	; 0x4c0 <lcd_gotoxy>
     81c:	88 e4       	ldi	r24, 0x48	; 72
     81e:	92 e0       	ldi	r25, 0x02	; 2
					lcd_gotoxy(1, 1);
     820:	6f de       	rcall	.-802    	; 0x500 <lcd_puts>
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	4c de       	rcall	.-872    	; 0x4c0 <lcd_gotoxy>
					lcd_puts("* INCORRECT *");
     828:	87 e5       	ldi	r24, 0x57	; 87
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	69 de       	rcall	.-814    	; 0x500 <lcd_puts>
     82e:	bf ef       	ldi	r27, 0xFF	; 255
     830:	2b e7       	ldi	r18, 0x7B	; 123
     832:	82 e9       	ldi	r24, 0x92	; 146
     834:	b1 50       	subi	r27, 0x01	; 1
     836:	20 40       	sbci	r18, 0x00	; 0
     838:	80 40       	sbci	r24, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <inputPassword+0x10c>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <inputPassword+0x116>
					_delay_ms(3000);
					outcome = 0;
     83e:	00 00       	nop
					break;
     840:	80 e0       	ldi	r24, 0x00	; 0
				}
				// Checks if the given password matches the current password
				else if (strncmp(password, givenPassword, 4) == 0)
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	57 c0       	rjmp	.+174    	; 0x8f4 <inputPassword+0x1cc>
     846:	44 e0       	ldi	r20, 0x04	; 4
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	be 01       	movw	r22, r28
     84c:	6f 5f       	subi	r22, 0xFF	; 255
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					lcd_clrscr();
     850:	c7 01       	movw	r24, r14
     852:	b6 d2       	rcall	.+1388   	; 0xdc0 <strncmp>
					lcd_gotoxy(1, 0);
     854:	89 2b       	or	r24, r25
     856:	e1 f4       	brne	.+56     	; 0x890 <inputPassword+0x168>
     858:	3b de       	rcall	.-906    	; 0x4d0 <lcd_clrscr>
     85a:	60 e0       	ldi	r22, 0x00	; 0
					lcd_puts("Given Password");
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	30 de       	rcall	.-928    	; 0x4c0 <lcd_gotoxy>
     860:	88 e4       	ldi	r24, 0x48	; 72
					lcd_gotoxy(1, 1);
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	4d de       	rcall	.-870    	; 0x500 <lcd_puts>
     866:	61 e0       	ldi	r22, 0x01	; 1
					lcd_puts("** CORRECT **");
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	2a de       	rcall	.-940    	; 0x4c0 <lcd_gotoxy>
     86c:	85 e6       	ldi	r24, 0x65	; 101
					TCCR3B = 0; // Turn the buzzer off
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	47 de       	rcall	.-882    	; 0x500 <lcd_puts>
     872:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
     876:	9f ef       	ldi	r25, 0xFF	; 255
     878:	a7 ea       	ldi	r26, 0xA7	; 167
     87a:	b1 e6       	ldi	r27, 0x61	; 97
     87c:	91 50       	subi	r25, 0x01	; 1
					_delay_ms(2000);
					lcd_clrscr();
     87e:	a0 40       	sbci	r26, 0x00	; 0
     880:	b0 40       	sbci	r27, 0x00	; 0
					outcome = 1;
     882:	e1 f7       	brne	.-8      	; 0x87c <inputPassword+0x154>
     884:	00 c0       	rjmp	.+0      	; 0x886 <inputPassword+0x15e>
					break;
     886:	00 00       	nop
				}
				// Check if given password is shorter than 4 
				else
				{
					lcd_clrscr();
     888:	23 de       	rcall	.-954    	; 0x4d0 <lcd_clrscr>
     88a:	81 e0       	ldi	r24, 0x01	; 1
					lcd_gotoxy(1, 0);
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	32 c0       	rjmp	.+100    	; 0x8f4 <inputPassword+0x1cc>
     890:	1f de       	rcall	.-962    	; 0x4d0 <lcd_clrscr>
     892:	60 e0       	ldi	r22, 0x00	; 0
					lcd_puts("Given Password");
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	14 de       	rcall	.-984    	; 0x4c0 <lcd_gotoxy>
     898:	88 e4       	ldi	r24, 0x48	; 72
     89a:	92 e0       	ldi	r25, 0x02	; 2
					lcd_gotoxy(1, 1);
     89c:	31 de       	rcall	.-926    	; 0x500 <lcd_puts>
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	81 e0       	ldi	r24, 0x01	; 1
					lcd_puts("* INCORRECT *");
     8a2:	0e de       	rcall	.-996    	; 0x4c0 <lcd_gotoxy>
     8a4:	87 e5       	ldi	r24, 0x57	; 87
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	2b de       	rcall	.-938    	; 0x500 <lcd_puts>
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	87 ea       	ldi	r24, 0xA7	; 167
     8ae:	91 e6       	ldi	r25, 0x61	; 97
     8b0:	21 50       	subi	r18, 0x01	; 1
     8b2:	80 40       	sbci	r24, 0x00	; 0
     8b4:	90 40       	sbci	r25, 0x00	; 0
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <inputPassword+0x188>
     8b8:	00 c0       	rjmp	.+0      	; 0x8ba <inputPassword+0x192>
     8ba:	00 00       	nop
					_delay_ms(2000);
					outcome = 0;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
					break;
     8c0:	19 c0       	rjmp	.+50     	; 0x8f4 <inputPassword+0x1cc>
				}
			} 
			// Check if a number key is pressed
			else 
			{
				givenPassword[i] = key;
     8c2:	e1 e0       	ldi	r30, 0x01	; 1
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	ec 0f       	add	r30, r28
     8c8:	fd 1f       	adc	r31, r29
     8ca:	e0 0f       	add	r30, r16
     8cc:	f1 1f       	adc	r31, r17
     8ce:	80 83       	st	Z, r24
				lcd_putc(key);
     8d0:	05 de       	rcall	.-1014   	; 0x4dc <lcd_putc>
     8d2:	0f 5f       	subi	r16, 0xFF	; 255
				i++;
     8d4:	1f 4f       	sbci	r17, 0xFF	; 255
     8d6:	af ef       	ldi	r26, 0xFF	; 255
     8d8:	b1 ee       	ldi	r27, 0xE1	; 225
     8da:	24 e0       	ldi	r18, 0x04	; 4
     8dc:	a1 50       	subi	r26, 0x01	; 1
     8de:	b0 40       	sbci	r27, 0x00	; 0
     8e0:	20 40       	sbci	r18, 0x00	; 0
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <inputPassword+0x1b4>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <inputPassword+0x1be>
     8e6:	00 00       	nop
     8e8:	08 30       	cpi	r16, 0x08	; 8
	uint8_t key;
	lcd_clrscr();
	lcd_puts("Enter Password:");
	lcd_gotoxy(0,1);

	while(i < 8) 
     8ea:	11 05       	cpc	r17, r1
     8ec:	0c f4       	brge	.+2      	; 0x8f0 <inputPassword+0x1c8>
     8ee:	47 cf       	rjmp	.-370    	; 0x77e <inputPassword+0x56>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
int 
inputPassword(char password[8]) 
{
	TCNT1 = 0;
	TIMSK1 &= ~(1 << OCIE1A);
	int outcome = 0;
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	28 96       	adiw	r28, 0x08	; 8
			}
		}
	}
	// Returns 1 if successful and 0 if not
	return outcome;
}
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <changePassword>:
     90e:	cf 92       	push	r12

// Function to change password - returns new password
const char* 
changePassword(char currentPassword[8]) 
{
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	28 97       	sbiw	r28, 0x08	; 8
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	7c 01       	movw	r14, r24
	
	int i = 0;
	char givenPassword[8] = "";
     930:	1a 82       	std	Y+2, r1	; 0x02
     932:	19 82       	std	Y+1, r1	; 0x01
     934:	fe 01       	movw	r30, r28
     936:	33 96       	adiw	r30, 0x03	; 3
     938:	86 e0       	ldi	r24, 0x06	; 6
     93a:	df 01       	movw	r26, r30
     93c:	1d 92       	st	X+, r1
     93e:	8a 95       	dec	r24
     940:	e9 f7       	brne	.-6      	; 0x93c <changePassword+0x2e>
	uint8_t key;
	lcd_clrscr();
     942:	c6 dd       	rcall	.-1140   	; 0x4d0 <lcd_clrscr>
	lcd_puts("New Password:");
     944:	83 e7       	ldi	r24, 0x73	; 115
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	db dd       	rcall	.-1098   	; 0x500 <lcd_puts>
	lcd_gotoxy(0,1);
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	b8 dd       	rcall	.-1168   	; 0x4c0 <lcd_gotoxy>
// Function to change password - returns new password
const char* 
changePassword(char currentPassword[8]) 
{
	
	int i = 0;
     950:	00 e0       	ldi	r16, 0x00	; 0
	lcd_clrscr();
	lcd_puts("New Password:");
	lcd_gotoxy(0,1);

	// Length of password
	while(i < 8) 
     952:	10 e0       	ldi	r17, 0x00	; 0
	{
		key = KEYPAD_GetKey();
     954:	ab c0       	rjmp	.+342    	; 0xaac <changePassword+0x19e>
     956:	a9 dc       	rcall	.-1710   	; 0x2aa <KEYPAD_GetKey>
		
		// keys 35 = #, 42 = *, 65 = A, 66 = B	REFERENCE: https://www.irongeek.com/alt-numpad-ascii-key-combos-and-chart.html
		if (key != 35 && key != 42 && key != 65 && key != 66) // Password is restricted to only numbers for simplicity
     958:	83 32       	cpi	r24, 0x23	; 35
     95a:	09 f4       	brne	.+2      	; 0x95e <changePassword+0x50>
     95c:	a7 c0       	rjmp	.+334    	; 0xaac <changePassword+0x19e>
     95e:	8a 32       	cpi	r24, 0x2A	; 42
     960:	09 f4       	brne	.+2      	; 0x964 <changePassword+0x56>
     962:	a4 c0       	rjmp	.+328    	; 0xaac <changePassword+0x19e>
     964:	81 34       	cpi	r24, 0x41	; 65
     966:	09 f4       	brne	.+2      	; 0x96a <changePassword+0x5c>
     968:	a1 c0       	rjmp	.+322    	; 0xaac <changePassword+0x19e>
     96a:	82 34       	cpi	r24, 0x42	; 66
     96c:	09 f4       	brne	.+2      	; 0x970 <changePassword+0x62>
     96e:	9e c0       	rjmp	.+316    	; 0xaac <changePassword+0x19e>
		{
			// C for backspace - C = 67
			if (key == 67) 
     970:	83 34       	cpi	r24, 0x43	; 67
     972:	b1 f4       	brne	.+44     	; 0x9a0 <changePassword+0x92>
			{
				if (i != 0) 
     974:	01 15       	cp	r16, r1
     976:	11 05       	cpc	r17, r1
     978:	09 f4       	brne	.+2      	; 0x97c <changePassword+0x6e>
				{
					lcd_gotoxy(i - 1,1);
     97a:	98 c0       	rjmp	.+304    	; 0xaac <changePassword+0x19e>
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	80 0f       	add	r24, r16
					lcd_puts(" ");
     982:	9e dd       	rcall	.-1220   	; 0x4c0 <lcd_gotoxy>
     984:	86 e4       	ldi	r24, 0x46	; 70
     986:	92 e0       	ldi	r25, 0x02	; 2
					lcd_gotoxy(i,1);
     988:	bb dd       	rcall	.-1162   	; 0x500 <lcd_puts>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	80 2f       	mov	r24, r16
					i--;
     98e:	98 dd       	rcall	.-1232   	; 0x4c0 <lcd_gotoxy>
     990:	01 50       	subi	r16, 0x01	; 1
					
					if (i == 0) 
     992:	11 09       	sbc	r17, r1
     994:	09 f0       	breq	.+2      	; 0x998 <changePassword+0x8a>
					{
						lcd_gotoxy(0,1);
     996:	8a c0       	rjmp	.+276    	; 0xaac <changePassword+0x19e>
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	91 dd       	rcall	.-1246   	; 0x4c0 <lcd_gotoxy>
     99e:	86 c0       	rjmp	.+268    	; 0xaac <changePassword+0x19e>
					}
				}
				
			}
			// If D is pressed - D = 68
			else if (key == 68) 
     9a0:	84 34       	cpi	r24, 0x44	; 68
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <changePassword+0x98>
     9a4:	5f c0       	rjmp	.+190    	; 0xa64 <changePassword+0x156>
			{
				if (strlen(givenPassword) == 4) // Check if given password length is 4
     9a6:	de 01       	movw	r26, r28
     9a8:	11 96       	adiw	r26, 0x01	; 1
     9aa:	fd 01       	movw	r30, r26
     9ac:	01 90       	ld	r0, Z+
     9ae:	00 20       	and	r0, r0
     9b0:	e9 f7       	brne	.-6      	; 0x9ac <changePassword+0x9e>
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	ea 1b       	sub	r30, r26
     9b6:	fb 0b       	sbc	r31, r27
     9b8:	e4 30       	cpi	r30, 0x04	; 4
     9ba:	f1 05       	cpc	r31, r1
				{
					currentPassword = givenPassword;
					break;
				}
				else if (strlen(givenPassword) <= 3) // Check if given password length is smaller than 4
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <changePassword+0xb2>
				{
					lcd_clrscr();
     9be:	7b c0       	rjmp	.+246    	; 0xab6 <changePassword+0x1a8>
					lcd_gotoxy(1,0);
     9c0:	34 97       	sbiw	r30, 0x04	; 4
     9c2:	40 f5       	brcc	.+80     	; 0xa14 <changePassword+0x106>
     9c4:	85 dd       	rcall	.-1270   	; 0x4d0 <lcd_clrscr>
					lcd_puts("** Password **");
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	7a dd       	rcall	.-1292   	; 0x4c0 <lcd_gotoxy>
     9cc:	81 e8       	ldi	r24, 0x81	; 129
					lcd_gotoxy(3,1);
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	97 dd       	rcall	.-1234   	; 0x500 <lcd_puts>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	83 e0       	ldi	r24, 0x03	; 3
					lcd_puts("Too  Short");
     9d6:	74 dd       	rcall	.-1304   	; 0x4c0 <lcd_gotoxy>
     9d8:	80 e9       	ldi	r24, 0x90	; 144
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	91 dd       	rcall	.-1246   	; 0x500 <lcd_puts>
     9de:	bf ef       	ldi	r27, 0xFF	; 255
     9e0:	27 ea       	ldi	r18, 0xA7	; 167
     9e2:	31 e6       	ldi	r19, 0x61	; 97
     9e4:	b1 50       	subi	r27, 0x01	; 1
     9e6:	20 40       	sbci	r18, 0x00	; 0
     9e8:	30 40       	sbci	r19, 0x00	; 0
     9ea:	e1 f7       	brne	.-8      	; 0x9e4 <changePassword+0xd6>
					_delay_ms(2000);
					
					// Loop until a suitable password is given
					while(1)
					{
						strcpy(givenPassword, changePassword(currentPassword));
     9ec:	00 c0       	rjmp	.+0      	; 0x9ee <changePassword+0xe0>
     9ee:	00 00       	nop
     9f0:	c7 01       	movw	r24, r14
     9f2:	8d df       	rcall	.-230    	; 0x90e <changePassword>
     9f4:	bc 01       	movw	r22, r24
     9f6:	8e 01       	movw	r16, r28
     9f8:	0f 5f       	subi	r16, 0xFF	; 255
     9fa:	1f 4f       	sbci	r17, 0xFF	; 255
						if (strlen(givenPassword) == 4)
     9fc:	c8 01       	movw	r24, r16
     9fe:	d9 d1       	rcall	.+946    	; 0xdb2 <strcpy>
     a00:	f8 01       	movw	r30, r16
     a02:	01 90       	ld	r0, Z+
     a04:	00 20       	and	r0, r0
     a06:	e9 f7       	brne	.-6      	; 0xa02 <changePassword+0xf4>
     a08:	31 97       	sbiw	r30, 0x01	; 1
					}
					break;
				}
				else // Check if given password length is greater than 4
				{
					lcd_clrscr();
     a0a:	e0 1b       	sub	r30, r16
     a0c:	f1 0b       	sbc	r31, r17
					lcd_gotoxy(1,0);
     a0e:	34 97       	sbiw	r30, 0x04	; 4
     a10:	79 f7       	brne	.-34     	; 0x9f0 <changePassword+0xe2>
     a12:	55 c0       	rjmp	.+170    	; 0xabe <changePassword+0x1b0>
     a14:	5d dd       	rcall	.-1350   	; 0x4d0 <lcd_clrscr>
					lcd_puts("** Password **");
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	52 dd       	rcall	.-1372   	; 0x4c0 <lcd_gotoxy>
					lcd_gotoxy(4,1);
     a1c:	81 e8       	ldi	r24, 0x81	; 129
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	6f dd       	rcall	.-1314   	; 0x500 <lcd_puts>
     a22:	61 e0       	ldi	r22, 0x01	; 1
					lcd_puts("Too Long");
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	4c dd       	rcall	.-1384   	; 0x4c0 <lcd_gotoxy>
     a28:	8b e9       	ldi	r24, 0x9B	; 155
     a2a:	92 e0       	ldi	r25, 0x02	; 2
     a2c:	69 dd       	rcall	.-1326   	; 0x500 <lcd_puts>
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	97 ea       	ldi	r25, 0xA7	; 167
     a32:	a1 e6       	ldi	r26, 0x61	; 97
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	a0 40       	sbci	r26, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <changePassword+0x126>
					_delay_ms(2000);
					
					// Loop until a suitable password is given
					while(1)
					{
						strcpy(givenPassword, changePassword(currentPassword));
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <changePassword+0x130>
     a3e:	00 00       	nop
     a40:	c7 01       	movw	r24, r14
     a42:	65 df       	rcall	.-310    	; 0x90e <changePassword>
     a44:	bc 01       	movw	r22, r24
     a46:	8e 01       	movw	r16, r28
     a48:	0f 5f       	subi	r16, 0xFF	; 255
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	c8 01       	movw	r24, r16
						if (strlen(givenPassword) == 4)
     a4e:	b1 d1       	rcall	.+866    	; 0xdb2 <strcpy>
     a50:	f8 01       	movw	r30, r16
     a52:	01 90       	ld	r0, Z+
     a54:	00 20       	and	r0, r0
     a56:	e9 f7       	brne	.-6      	; 0xa52 <changePassword+0x144>
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	e0 1b       	sub	r30, r16
     a5c:	f1 0b       	sbc	r31, r17
     a5e:	34 97       	sbiw	r30, 0x04	; 4
     a60:	79 f7       	brne	.-34     	; 0xa40 <changePassword+0x132>
					break;					
				}
			} 
			else // When number key is pressed add it to givenPassword array
			{
				givenPassword[i] = key;
     a62:	32 c0       	rjmp	.+100    	; 0xac8 <changePassword+0x1ba>
     a64:	9e 01       	movw	r18, r28
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	69 01       	movw	r12, r18
     a6c:	f9 01       	movw	r30, r18
     a6e:	e0 0f       	add	r30, r16
     a70:	f1 1f       	adc	r31, r17
				lcd_putc(key);
     a72:	80 83       	st	Z, r24
				i++;
     a74:	33 dd       	rcall	.-1434   	; 0x4dc <lcd_putc>
     a76:	0f 5f       	subi	r16, 0xFF	; 255
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	89 e6       	ldi	r24, 0x69	; 105
     a7e:	98 e1       	ldi	r25, 0x18	; 24
     a80:	31 50       	subi	r19, 0x01	; 1
     a82:	80 40       	sbci	r24, 0x00	; 0
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <changePassword+0x172>
				_delay_ms(500);
				
				// Check if given passwords length is 8
				// If it is - Reset
				if (strlen(givenPassword) >= 8) // This has been made to avoid bugs
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <changePassword+0x17c>
     a8a:	00 00       	nop
     a8c:	f6 01       	movw	r30, r12
     a8e:	01 90       	ld	r0, Z+
     a90:	00 20       	and	r0, r0
     a92:	e9 f7       	brne	.-6      	; 0xa8e <changePassword+0x180>
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	ec 19       	sub	r30, r12
     a98:	fd 09       	sbc	r31, r13
				{
					i = 0;
					strcpy(givenPassword, "");
     a9a:	38 97       	sbiw	r30, 0x08	; 8
					lcd_clrscr();
     a9c:	38 f0       	brcs	.+14     	; 0xaac <changePassword+0x19e>
     a9e:	19 82       	std	Y+1, r1	; 0x01
					lcd_puts("Press D to reset");		
     aa0:	17 dd       	rcall	.-1490   	; 0x4d0 <lcd_clrscr>
     aa2:	84 ea       	ldi	r24, 0xA4	; 164
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	2c dd       	rcall	.-1448   	; 0x500 <lcd_puts>
				
				// Check if given passwords length is 8
				// If it is - Reset
				if (strlen(givenPassword) >= 8) // This has been made to avoid bugs
				{
					i = 0;
     aa8:	00 e0       	ldi	r16, 0x00	; 0
     aaa:	10 e0       	ldi	r17, 0x00	; 0
	lcd_clrscr();
	lcd_puts("New Password:");
	lcd_gotoxy(0,1);

	// Length of password
	while(i < 8) 
     aac:	08 30       	cpi	r16, 0x08	; 8
     aae:	11 05       	cpc	r17, r1
     ab0:	0c f4       	brge	.+2      	; 0xab4 <changePassword+0x1a6>
     ab2:	51 cf       	rjmp	.-350    	; 0x956 <changePassword+0x48>
     ab4:	0c c0       	rjmp	.+24     	; 0xace <changePassword+0x1c0>
			// If D is pressed - D = 68
			else if (key == 68) 
			{
				if (strlen(givenPassword) == 4) // Check if given password length is 4
				{
					currentPassword = givenPassword;
     ab6:	de 01       	movw	r26, r28
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	7d 01       	movw	r14, r26
     abc:	08 c0       	rjmp	.+16     	; 0xace <changePassword+0x1c0>
					while(1)
					{
						strcpy(givenPassword, changePassword(currentPassword));
						if (strlen(givenPassword) == 4)
						{
							currentPassword = givenPassword;
     abe:	9e 01       	movw	r18, r28
     ac0:	2f 5f       	subi	r18, 0xFF	; 255
     ac2:	3f 4f       	sbci	r19, 0xFF	; 255
     ac4:	79 01       	movw	r14, r18
     ac6:	03 c0       	rjmp	.+6      	; 0xace <changePassword+0x1c0>
					while(1)
					{
						strcpy(givenPassword, changePassword(currentPassword));
						if (strlen(givenPassword) == 4)
						{
							currentPassword = givenPassword;
     ac8:	ce 01       	movw	r24, r28
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	7c 01       	movw	r14, r24
			}
		}
	}

	return currentPassword;
}
     ace:	c7 01       	movw	r24, r14
     ad0:	28 96       	adiw	r28, 0x08	; 8
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	08 95       	ret

00000aee <main>:


int 
main() 
{
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	e0 97       	sbiw	r28, 0x30	; 48
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
	// For starters the password is 1234, but it can be changed
	char password[8] = "1234";
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	ec e1       	ldi	r30, 0x1C	; 28
     b06:	f2 e0       	ldi	r31, 0x02	; 2
     b08:	de 01       	movw	r26, r28
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	01 90       	ld	r0, Z+
     b0e:	0d 92       	st	X+, r0
     b10:	8a 95       	dec	r24
     b12:	e1 f7       	brne	.-8      	; 0xb0c <main+0x1e>
     b14:	fe 01       	movw	r30, r28
     b16:	36 96       	adiw	r30, 0x06	; 6
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	df 01       	movw	r26, r30
     b1c:	1d 92       	st	X+, r1
     b1e:	8a 95       	dec	r24
     b20:	e9 f7       	brne	.-6      	; 0xb1c <main+0x2e>
	
	// outcome is for checking whether the given password was right or wrong
	int outcome;
	
	// State is set to inactive in the begin
	state = 0;
     b22:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__data_end+0x1>
     b26:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__data_end>
	
	// Initializing keypad input variable
	uint8_t key;

	// Initializing LCD, Buzzer, and Keypad
	lcd_init(LCD_DISP_ON);
     b2a:	8c e0       	ldi	r24, 0x0C	; 12
     b2c:	f7 dc       	rcall	.-1554   	; 0x51c <lcd_init>
	init_buzzer();
     b2e:	d1 dd       	rcall	.-1118   	; 0x6d2 <init_buzzer>
	lcd_clrscr();
     b30:	cf dc       	rcall	.-1634   	; 0x4d0 <lcd_clrscr>
     b32:	89 db       	rcall	.-2286   	; 0x246 <KEYPAD_Init>
	KEYPAD_Init();
     b34:	84 b1       	in	r24, 0x04	; 4
     b36:	87 60       	ori	r24, 0x07	; 7
	
	// For SPI
	/* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // SS as output
     b38:	84 b9       	out	0x04, r24	; 4
     b3a:	8c b5       	in	r24, 0x2c	; 44
     b3c:	80 65       	ori	r24, 0x50	; 80
	/* set SPI enable and master/slave select, making MEGA the master */
	SPCR |= (1 << 6) | (1 << 4);
     b3e:	8c bd       	out	0x2c, r24	; 44
     b40:	8c b5       	in	r24, 0x2c	; 44
     b42:	81 60       	ori	r24, 0x01	; 1
	/* set SPI clock rate to 1 MHz */
	SPCR |= (1 << 0);
     b44:	8c bd       	out	0x2c, r24	; 44
     b46:	87 e6       	ldi	r24, 0x67	; 103

	// initialize the UART with 9600 BAUD
	USART_init(MYUBRR);
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	31 dd       	rcall	.-1438   	; 0x5ae <USART_init>
     b4c:	e0 e7       	ldi	r30, 0x70	; 112
     b4e:	f3 e0       	ldi	r31, 0x03	; 3
	
	// redirect the stdin and stdout to UART functions
	stdout = &uart_output;
     b50:	8e e0       	ldi	r24, 0x0E	; 14
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	93 83       	std	Z+3, r25	; 0x03
     b56:	82 83       	std	Z+2, r24	; 0x02
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	92 e0       	ldi	r25, 0x02	; 2
	stdin = &uart_input;
     b5c:	91 83       	std	Z+1, r25	; 0x01
     b5e:	80 83       	st	Z, r24
     b60:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <__data_end>
	char spi_send_pir[20];
	
	// Main loop for the program
	while(1)
	{
		switch(state) // State has 4 values - 0 -> inactive, 1 -> Alarm active waiting for movement, 2 -> Change password, 3- > Alarm active
     b64:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <__data_end+0x1>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	b1 f1       	breq	.+108    	; 0xbda <main+0xec>
     b6e:	1c f4       	brge	.+6      	; 0xb76 <main+0x88>
     b70:	89 2b       	or	r24, r25
     b72:	49 f0       	breq	.+18     	; 0xb86 <main+0x98>
     b74:	f5 cf       	rjmp	.-22     	; 0xb60 <main+0x72>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	91 05       	cpc	r25, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <main+0x90>
     b7c:	83 c0       	rjmp	.+262    	; 0xc84 <main+0x196>
     b7e:	03 97       	sbiw	r24, 0x03	; 3
     b80:	09 f4       	brne	.+2      	; 0xb84 <main+0x96>
     b82:	dd c0       	rjmp	.+442    	; 0xd3e <main+0x250>
     b84:	ed cf       	rjmp	.-38     	; 0xb60 <main+0x72>
		{
			
			case 0: // Alarm not armed state
			
				lcd_clrscr();
     b86:	a4 dc       	rcall	.-1720   	; 0x4d0 <lcd_clrscr>
				lcd_gotoxy(1, 0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	99 dc       	rcall	.-1742   	; 0x4c0 <lcd_gotoxy>
				lcd_puts("* ALARM OFF *");
     b8e:	85 eb       	ldi	r24, 0xB5	; 181
     b90:	92 e0       	ldi	r25, 0x02	; 2
				lcd_gotoxy(1, 1);
     b92:	b6 dc       	rcall	.-1684   	; 0x500 <lcd_puts>
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	93 dc       	rcall	.-1754   	; 0x4c0 <lcd_gotoxy>
				lcd_puts("Press * to arm");
     b9a:	83 ec       	ldi	r24, 0xC3	; 195
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	b0 dc       	rcall	.-1696   	; 0x500 <lcd_puts>
     ba0:	84 db       	rcall	.-2296   	; 0x2aa <KEYPAD_GetKey>
				key = KEYPAD_GetKey();
     ba2:	8a 32       	cpi	r24, 0x2A	; 42
     ba4:	39 f4       	brne	.+14     	; 0xbb4 <main+0xc6>
				
				// If * key is pressed alarms is activated
				if (key == 42) 
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
				{
					state = 1;
     baa:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__data_end+0x1>
     bae:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__data_end>
     bb2:	d6 cf       	rjmp	.-84     	; 0xb60 <main+0x72>
     bb4:	83 32       	cpi	r24, 0x23	; 35
					break;
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <main+0xd8>
				// If # key is pressed go to changing password mode
				} 
				else if (key == 35) 
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	90 e0       	ldi	r25, 0x00	; 0
				{
					state = 2;
     bbc:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__data_end+0x1>
     bc0:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__data_end>
     bc4:	cd cf       	rjmp	.-102    	; 0xb60 <main+0x72>
     bc6:	bf ef       	ldi	r27, 0xFF	; 255
     bc8:	21 ee       	ldi	r18, 0xE1	; 225
     bca:	34 e0       	ldi	r19, 0x04	; 4
     bcc:	b1 50       	subi	r27, 0x01	; 1
     bce:	20 40       	sbci	r18, 0x00	; 0
     bd0:	30 40       	sbci	r19, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <main+0xde>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <main+0xe8>
     bd6:	00 00       	nop
				_delay_ms(100);
			break;
			
			case 1: // Alarm active state
			
				lcd_clrscr();
     bd8:	c3 cf       	rjmp	.-122    	; 0xb60 <main+0x72>
     bda:	7a dc       	rcall	.-1804   	; 0x4d0 <lcd_clrscr>
				lcd_gotoxy(2, 0);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	6f dc       	rcall	.-1826   	; 0x4c0 <lcd_gotoxy>
     be2:	82 ed       	ldi	r24, 0xD2	; 210
				lcd_puts("* ALARM ON *");
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	8c dc       	rcall	.-1768   	; 0x500 <lcd_puts>
     be8:	19 86       	std	Y+9, r1	; 0x09
     bea:	85 b1       	in	r24, 0x05	; 5
				
				strcpy(spi_receive_pir, "");
     bec:	8e 7f       	andi	r24, 0xFE	; 254
				
				// Loop for motion detection sensor - communicates with slave
				while (1) 
				{
					  /* send byte to slave and receive a byte from slave */
					  PORTB &= ~(1 << PB0); // SS LOW
     bee:	85 b9       	out	0x05, r24	; 5
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	20 c0       	rjmp	.+64     	; 0xc34 <main+0x146>
					  
					  for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_pir); spi_data_index++) 
     bf4:	08 2e       	mov	r0, r24
     bf6:	00 0c       	add	r0, r0
					  {
						  
						  SPDR = spi_send_pir[spi_data_index]; // send byte using SPI data register
     bf8:	99 0b       	sbc	r25, r25
     bfa:	ed e1       	ldi	r30, 0x1D	; 29
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	ec 0f       	add	r30, r28
     c00:	fd 1f       	adc	r31, r29
     c02:	e8 0f       	add	r30, r24
     c04:	f9 1f       	adc	r31, r25
     c06:	30 81       	ld	r19, Z
     c08:	3e bd       	out	0x2e, r19	; 46
     c0a:	aa e1       	ldi	r26, 0x1A	; 26
     c0c:	aa 95       	dec	r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <main+0x11e>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x124>
     c12:	0d b4       	in	r0, 0x2d	; 45
     c14:	07 fe       	sbrs	r0, 7
						  _delay_us(5);
						  while(!(SPSR & (1 << SPIF))) 
     c16:	fd cf       	rjmp	.-6      	; 0xc12 <main+0x124>
     c18:	ba e1       	ldi	r27, 0x1A	; 26
     c1a:	ba 95       	dec	r27
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <main+0x12c>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <main+0x132>
     c20:	3e b5       	in	r19, 0x2e	; 46
     c22:	e9 e0       	ldi	r30, 0x09	; 9
						  {
							  /* wait until the transmission is complete */
							  ;
						  }
						  _delay_us(5);
						  spi_receive_pir[spi_data_index] = SPDR; // receive byte from the SPI data register
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ec 0f       	add	r30, r28
     c28:	fd 1f       	adc	r31, r29
     c2a:	e8 0f       	add	r30, r24
     c2c:	f9 1f       	adc	r31, r25
     c2e:	30 83       	st	Z, r19
     c30:	81 e0       	ldi	r24, 0x01	; 1
				while (1) 
				{
					  /* send byte to slave and receive a byte from slave */
					  PORTB &= ~(1 << PB0); // SS LOW
					  
					  for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_pir); spi_data_index++) 
     c32:	82 0f       	add	r24, r18
     c34:	28 2f       	mov	r18, r24
     c36:	84 31       	cpi	r24, 0x14	; 20
     c38:	e8 f2       	brcs	.-70     	; 0xbf4 <main+0x106>
						  _delay_us(5);
						  spi_receive_pir[spi_data_index] = SPDR; // receive byte from the SPI data register
						  
					  }
					  
					  PORTB |= (1 << PB0); // SS HIGH
     c3a:	85 b1       	in	r24, 0x05	; 5
     c3c:	81 60       	ori	r24, 0x01	; 1
					  printf(spi_receive_pir);
     c3e:	85 b9       	out	0x05, r24	; 5
     c40:	8e 01       	movw	r16, r28
     c42:	07 5f       	subi	r16, 0xF7	; 247
     c44:	1f 4f       	sbci	r17, 0xFF	; 255
     c46:	1f 93       	push	r17
     c48:	0f 93       	push	r16
     c4a:	c8 d0       	rcall	.+400    	; 0xddc <printf>
					  printf("\n");
     c4c:	8a e0       	ldi	r24, 0x0A	; 10
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	d8 d0       	rcall	.+432    	; 0xe02 <putchar>
     c52:	6f ed       	ldi	r22, 0xDF	; 223
					  
					  // If there is movement then the system goes into alarm mode
					  if (strcmp(spi_receive_pir, "movement_detected") == 0) 
     c54:	72 e0       	ldi	r23, 0x02	; 2
     c56:	c8 01       	movw	r24, r16
     c58:	a3 d0       	rcall	.+326    	; 0xda0 <strcmp>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	89 2b       	or	r24, r25
     c60:	39 f4       	brne	.+14     	; 0xc70 <main+0x182>
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	90 e0       	ldi	r25, 0x00	; 0
					  {
						  
						  state = 3;
     c66:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__data_end+0x1>
     c6a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6e:	78 cf       	rjmp	.-272    	; 0xb60 <main+0x72>
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	39 e6       	ldi	r19, 0x69	; 105
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	30 40       	sbci	r19, 0x00	; 0
     c7a:	80 40       	sbci	r24, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <main+0x188>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <main+0x192>
				}
			break;
				
			case 2: // Change password state
				
				lcd_clrscr();
     c80:	00 00       	nop
     c82:	b3 cf       	rjmp	.-154    	; 0xbea <main+0xfc>
				lcd_puts("Redirecting to");
     c84:	25 dc       	rcall	.-1974   	; 0x4d0 <lcd_clrscr>
     c86:	81 ef       	ldi	r24, 0xF1	; 241
     c88:	92 e0       	ldi	r25, 0x02	; 2
				lcd_gotoxy(0, 1);
     c8a:	3a dc       	rcall	.-1932   	; 0x500 <lcd_puts>
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	17 dc       	rcall	.-2002   	; 0x4c0 <lcd_gotoxy>
				lcd_puts("Change Password");
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	34 dc       	rcall	.-1944   	; 0x500 <lcd_puts>
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	a7 ea       	ldi	r26, 0xA7	; 167
     c9c:	b1 e6       	ldi	r27, 0x61	; 97
     c9e:	91 50       	subi	r25, 0x01	; 1
     ca0:	a0 40       	sbci	r26, 0x00	; 0
     ca2:	b0 40       	sbci	r27, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <main+0x1b0>
				_delay_ms(2000);
				// First we require old PIN
				outcome = inputPassword(password);
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <main+0x1ba>
     ca8:	00 00       	nop
     caa:	ce 01       	movw	r24, r28
				
				// If given password was incorrect go into the if statement
				if (outcome == 0) 
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	3c dd       	rcall	.-1416   	; 0x728 <inputPassword>
				{
					state = 3; // Go to alarm state
     cb0:	89 2b       	or	r24, r25
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <main+0x1d4>
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <__data_end+0x1>
				} 
				// If given password was correct go into the else statement
				else 
				{
					lcd_clrscr();	
     cbc:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <__data_end>
					lcd_puts("A to change");
     cc0:	4f cf       	rjmp	.-354    	; 0xb60 <main+0x72>
     cc2:	06 dc       	rcall	.-2036   	; 0x4d0 <lcd_clrscr>
     cc4:	80 e1       	ldi	r24, 0x10	; 16
					lcd_gotoxy(0,1);
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	1b dc       	rcall	.-1994   	; 0x500 <lcd_puts>
					lcd_puts("B to cancel");
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	f8 db       	rcall	.-2064   	; 0x4c0 <lcd_gotoxy>
     cd0:	8c e1       	ldi	r24, 0x1C	; 28
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	15 dc       	rcall	.-2006   	; 0x500 <lcd_puts>
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	37 ea       	ldi	r19, 0xA7	; 167
     cda:	81 e6       	ldi	r24, 0x61	; 97
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	30 40       	sbci	r19, 0x00	; 0
					_delay_ms(2000);
					
					// A calls for changePassword function 
					key = KEYPAD_GetKey();
     ce0:	80 40       	sbci	r24, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <main+0x1ee>

					if (key == 65) // A = 65
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <main+0x1f8>
     ce6:	00 00       	nop
					{
						strcpy(password, changePassword(password));	
     ce8:	e0 da       	rcall	.-2624   	; 0x2aa <KEYPAD_GetKey>
     cea:	81 34       	cpi	r24, 0x41	; 65
     cec:	f9 f4       	brne	.+62     	; 0xd2c <main+0x23e>
     cee:	ce 01       	movw	r24, r28
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	0d de       	rcall	.-998    	; 0x90e <changePassword>
     cf4:	bc 01       	movw	r22, r24
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
						lcd_clrscr();
     cfa:	5b d0       	rcall	.+182    	; 0xdb2 <strcpy>
     cfc:	e9 db       	rcall	.-2094   	; 0x4d0 <lcd_clrscr>
						lcd_puts("Password change:");
     cfe:	88 e2       	ldi	r24, 0x28	; 40
     d00:	93 e0       	ldi	r25, 0x03	; 3
						lcd_gotoxy(0, 1);
     d02:	fe db       	rcall	.-2052   	; 0x500 <lcd_puts>
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	80 e0       	ldi	r24, 0x00	; 0
						lcd_puts("** SUCCESSFUL **");	
     d08:	db db       	rcall	.-2122   	; 0x4c0 <lcd_gotoxy>
     d0a:	89 e3       	ldi	r24, 0x39	; 57
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	f8 db       	rcall	.-2064   	; 0x500 <lcd_puts>
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	a7 ea       	ldi	r26, 0xA7	; 167
     d14:	b1 e6       	ldi	r27, 0x61	; 97
     d16:	91 50       	subi	r25, 0x01	; 1
     d18:	a0 40       	sbci	r26, 0x00	; 0
     d1a:	b0 40       	sbci	r27, 0x00	; 0
     d1c:	e1 f7       	brne	.-8      	; 0xd16 <main+0x228>
						_delay_ms(2000);
						state = 0; // Return to offline mode
     d1e:	00 c0       	rjmp	.+0      	; 0xd20 <main+0x232>
     d20:	00 00       	nop
     d22:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__data_end+0x1>
						break;
					} 
					else if (key == 66) // B = 66
     d26:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__data_end>
					{
						state = 0;
     d2a:	1a cf       	rjmp	.-460    	; 0xb60 <main+0x72>
     d2c:	82 34       	cpi	r24, 0x42	; 66
     d2e:	29 f4       	brne	.+10     	; 0xd3a <main+0x24c>
						break;
     d30:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__data_end+0x1>
					}
					lcd_clrscr();
     d34:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__data_end>
				}
			break;
			
			case 3: // Alarm active state
			
				lcd_clrscr();
     d38:	13 cf       	rjmp	.-474    	; 0xb60 <main+0x72>
     d3a:	ca db       	rcall	.-2156   	; 0x4d0 <lcd_clrscr>
				lcd_puts("Alarm is active");
     d3c:	11 cf       	rjmp	.-478    	; 0xb60 <main+0x72>
     d3e:	c8 db       	rcall	.-2160   	; 0x4d0 <lcd_clrscr>
     d40:	8a e4       	ldi	r24, 0x4A	; 74
     d42:	93 e0       	ldi	r25, 0x03	; 3
				lcd_gotoxy(0,1);
     d44:	dd db       	rcall	.-2118   	; 0x500 <lcd_puts>
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	ba db       	rcall	.-2188   	; 0x4c0 <lcd_gotoxy>
				lcd_puts("Press # - Disarm");			
     d4c:	8a e5       	ldi	r24, 0x5A	; 90
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	d7 db       	rcall	.-2130   	; 0x500 <lcd_puts>
     d52:	e1 e9       	ldi	r30, 0x91	; 145
				
				while(1)
				{
					// Turn buzzer on
					TCCR3B |= (1 << 4); // set register B WBM[3:2] bits
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 61       	ori	r24, 0x10	; 16
     d5a:	80 83       	st	Z, r24
     d5c:	80 81       	ld	r24, Z
					TCCR3B |= (1 << 0); // set prescaling to 1 (no prescaling)
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	80 83       	st	Z, r24
     d62:	a3 da       	rcall	.-2746   	; 0x2aa <KEYPAD_GetKey>
								
					key = KEYPAD_GetKey();
     d64:	83 32       	cpi	r24, 0x23	; 35
     d66:	a9 f7       	brne	.-22     	; 0xd52 <main+0x264>
						
					if (key == 35) // 35 = #
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
					{
						outcome = inputPassword(password);
     d6c:	dd dc       	rcall	.-1606   	; 0x728 <inputPassword>
     d6e:	89 2b       	or	r24, r25
     d70:	51 f4       	brne	.+20     	; 0xd86 <main+0x298>
     d72:	ce 01       	movw	r24, r28
						if (outcome == 0) 
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	d8 dc       	rcall	.-1616   	; 0x728 <inputPassword>
						{
							// If password was wrong try again
							while(1)
							{
								outcome = inputPassword(password);
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	d9 f7       	brne	.-10     	; 0xd72 <main+0x284>
     d7c:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__data_end+0x1>
								if (outcome == 1) {
     d80:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__data_end>
									state = 0;
     d84:	ed ce       	rjmp	.-550    	; 0xb60 <main+0x72>
     d86:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <__data_end+0x1>
     d8a:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__data_end>
							
						} 
						else 
						{
							// If password was correct disarm alarm
							state = 0;
     d8e:	e8 ce       	rjmp	.-560    	; 0xb60 <main+0x72>

00000d90 <__tablejump2__>:
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	88 1f       	adc	r24, r24
						}
						break;
     d96:	8b bf       	out	0x3b, r24	; 59
     d98:	07 90       	elpm	r0, Z+
     d9a:	f6 91       	elpm	r31, Z
     d9c:	e0 2d       	mov	r30, r0
     d9e:	19 94       	eijmp

00000da0 <strcmp>:
     da0:	fb 01       	movw	r30, r22
     da2:	dc 01       	movw	r26, r24
     da4:	8d 91       	ld	r24, X+
     da6:	01 90       	ld	r0, Z+
     da8:	80 19       	sub	r24, r0
     daa:	01 10       	cpse	r0, r1
     dac:	d9 f3       	breq	.-10     	; 0xda4 <strcmp+0x4>
     dae:	99 0b       	sbc	r25, r25
     db0:	08 95       	ret

00000db2 <strcpy>:
     db2:	fb 01       	movw	r30, r22
     db4:	dc 01       	movw	r26, r24
     db6:	01 90       	ld	r0, Z+
     db8:	0d 92       	st	X+, r0
     dba:	00 20       	and	r0, r0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <strcpy+0x4>
     dbe:	08 95       	ret

00000dc0 <strncmp>:
     dc0:	fb 01       	movw	r30, r22
     dc2:	dc 01       	movw	r26, r24
     dc4:	41 50       	subi	r20, 0x01	; 1
     dc6:	50 40       	sbci	r21, 0x00	; 0
     dc8:	30 f0       	brcs	.+12     	; 0xdd6 <strncmp+0x16>
     dca:	8d 91       	ld	r24, X+
     dcc:	01 90       	ld	r0, Z+
     dce:	80 19       	sub	r24, r0
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <strncmp+0x18>
     dd2:	00 20       	and	r0, r0
     dd4:	b9 f7       	brne	.-18     	; 0xdc4 <strncmp+0x4>
     dd6:	88 1b       	sub	r24, r24
     dd8:	99 0b       	sbc	r25, r25
     dda:	08 95       	ret

00000ddc <printf>:
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	ae 01       	movw	r20, r28
     de6:	4a 5f       	subi	r20, 0xFA	; 250
     de8:	5f 4f       	sbci	r21, 0xFF	; 255
     dea:	fa 01       	movw	r30, r20
     dec:	61 91       	ld	r22, Z+
     dee:	71 91       	ld	r23, Z+
     df0:	af 01       	movw	r20, r30
     df2:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__iob+0x2>
     df6:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <__iob+0x3>
     dfa:	08 d0       	rcall	.+16     	; 0xe0c <vfprintf>
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <putchar>:
     e02:	60 91 72 03 	lds	r22, 0x0372	; 0x800372 <__iob+0x2>
     e06:	70 91 73 03 	lds	r23, 0x0373	; 0x800373 <__iob+0x3>
     e0a:	13 c2       	rjmp	.+1062   	; 0x1232 <fputc>

00000e0c <vfprintf>:
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	2b 97       	sbiw	r28, 0x0b	; 11
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	6c 01       	movw	r12, r24
     e42:	7b 01       	movw	r14, r22
     e44:	8a 01       	movw	r16, r20
     e46:	fc 01       	movw	r30, r24
     e48:	17 82       	std	Z+7, r1	; 0x07
     e4a:	16 82       	std	Z+6, r1	; 0x06
     e4c:	83 81       	ldd	r24, Z+3	; 0x03
     e4e:	81 ff       	sbrs	r24, 1
     e50:	bf c1       	rjmp	.+894    	; 0x11d0 <__EEPROM_REGION_LENGTH__+0x1d0>
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	3c 01       	movw	r6, r24
     e58:	f6 01       	movw	r30, r12
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	f7 01       	movw	r30, r14
     e5e:	93 fd       	sbrc	r25, 3
     e60:	85 91       	lpm	r24, Z+
     e62:	93 ff       	sbrs	r25, 3
     e64:	81 91       	ld	r24, Z+
     e66:	7f 01       	movw	r14, r30
     e68:	88 23       	and	r24, r24
     e6a:	09 f4       	brne	.+2      	; 0xe6e <vfprintf+0x62>
     e6c:	ad c1       	rjmp	.+858    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     e6e:	85 32       	cpi	r24, 0x25	; 37
     e70:	39 f4       	brne	.+14     	; 0xe80 <vfprintf+0x74>
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	7f 01       	movw	r14, r30
     e7c:	85 32       	cpi	r24, 0x25	; 37
     e7e:	21 f4       	brne	.+8      	; 0xe88 <vfprintf+0x7c>
     e80:	b6 01       	movw	r22, r12
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	d6 d1       	rcall	.+940    	; 0x1232 <fputc>
     e86:	e8 cf       	rjmp	.-48     	; 0xe58 <vfprintf+0x4c>
     e88:	91 2c       	mov	r9, r1
     e8a:	21 2c       	mov	r2, r1
     e8c:	31 2c       	mov	r3, r1
     e8e:	ff e1       	ldi	r31, 0x1F	; 31
     e90:	f3 15       	cp	r31, r3
     e92:	d8 f0       	brcs	.+54     	; 0xeca <vfprintf+0xbe>
     e94:	8b 32       	cpi	r24, 0x2B	; 43
     e96:	79 f0       	breq	.+30     	; 0xeb6 <vfprintf+0xaa>
     e98:	38 f4       	brcc	.+14     	; 0xea8 <vfprintf+0x9c>
     e9a:	80 32       	cpi	r24, 0x20	; 32
     e9c:	79 f0       	breq	.+30     	; 0xebc <vfprintf+0xb0>
     e9e:	83 32       	cpi	r24, 0x23	; 35
     ea0:	a1 f4       	brne	.+40     	; 0xeca <vfprintf+0xbe>
     ea2:	23 2d       	mov	r18, r3
     ea4:	20 61       	ori	r18, 0x10	; 16
     ea6:	1d c0       	rjmp	.+58     	; 0xee2 <vfprintf+0xd6>
     ea8:	8d 32       	cpi	r24, 0x2D	; 45
     eaa:	61 f0       	breq	.+24     	; 0xec4 <vfprintf+0xb8>
     eac:	80 33       	cpi	r24, 0x30	; 48
     eae:	69 f4       	brne	.+26     	; 0xeca <vfprintf+0xbe>
     eb0:	23 2d       	mov	r18, r3
     eb2:	21 60       	ori	r18, 0x01	; 1
     eb4:	16 c0       	rjmp	.+44     	; 0xee2 <vfprintf+0xd6>
     eb6:	83 2d       	mov	r24, r3
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	38 2e       	mov	r3, r24
     ebc:	e3 2d       	mov	r30, r3
     ebe:	e4 60       	ori	r30, 0x04	; 4
     ec0:	3e 2e       	mov	r3, r30
     ec2:	2a c0       	rjmp	.+84     	; 0xf18 <vfprintf+0x10c>
     ec4:	f3 2d       	mov	r31, r3
     ec6:	f8 60       	ori	r31, 0x08	; 8
     ec8:	1d c0       	rjmp	.+58     	; 0xf04 <vfprintf+0xf8>
     eca:	37 fc       	sbrc	r3, 7
     ecc:	2d c0       	rjmp	.+90     	; 0xf28 <vfprintf+0x11c>
     ece:	20 ed       	ldi	r18, 0xD0	; 208
     ed0:	28 0f       	add	r18, r24
     ed2:	2a 30       	cpi	r18, 0x0A	; 10
     ed4:	40 f0       	brcs	.+16     	; 0xee6 <vfprintf+0xda>
     ed6:	8e 32       	cpi	r24, 0x2E	; 46
     ed8:	b9 f4       	brne	.+46     	; 0xf08 <vfprintf+0xfc>
     eda:	36 fc       	sbrc	r3, 6
     edc:	75 c1       	rjmp	.+746    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
     ede:	23 2d       	mov	r18, r3
     ee0:	20 64       	ori	r18, 0x40	; 64
     ee2:	32 2e       	mov	r3, r18
     ee4:	19 c0       	rjmp	.+50     	; 0xf18 <vfprintf+0x10c>
     ee6:	36 fe       	sbrs	r3, 6
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0xea>
     eea:	8a e0       	ldi	r24, 0x0A	; 10
     eec:	98 9e       	mul	r9, r24
     eee:	20 0d       	add	r18, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	92 2e       	mov	r9, r18
     ef4:	11 c0       	rjmp	.+34     	; 0xf18 <vfprintf+0x10c>
     ef6:	ea e0       	ldi	r30, 0x0A	; 10
     ef8:	2e 9e       	mul	r2, r30
     efa:	20 0d       	add	r18, r0
     efc:	11 24       	eor	r1, r1
     efe:	22 2e       	mov	r2, r18
     f00:	f3 2d       	mov	r31, r3
     f02:	f0 62       	ori	r31, 0x20	; 32
     f04:	3f 2e       	mov	r3, r31
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <vfprintf+0x10c>
     f08:	8c 36       	cpi	r24, 0x6C	; 108
     f0a:	21 f4       	brne	.+8      	; 0xf14 <vfprintf+0x108>
     f0c:	83 2d       	mov	r24, r3
     f0e:	80 68       	ori	r24, 0x80	; 128
     f10:	38 2e       	mov	r3, r24
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <vfprintf+0x10c>
     f14:	88 36       	cpi	r24, 0x68	; 104
     f16:	41 f4       	brne	.+16     	; 0xf28 <vfprintf+0x11c>
     f18:	f7 01       	movw	r30, r14
     f1a:	93 fd       	sbrc	r25, 3
     f1c:	85 91       	lpm	r24, Z+
     f1e:	93 ff       	sbrs	r25, 3
     f20:	81 91       	ld	r24, Z+
     f22:	7f 01       	movw	r14, r30
     f24:	81 11       	cpse	r24, r1
     f26:	b3 cf       	rjmp	.-154    	; 0xe8e <vfprintf+0x82>
     f28:	98 2f       	mov	r25, r24
     f2a:	9f 7d       	andi	r25, 0xDF	; 223
     f2c:	95 54       	subi	r25, 0x45	; 69
     f2e:	93 30       	cpi	r25, 0x03	; 3
     f30:	28 f4       	brcc	.+10     	; 0xf3c <vfprintf+0x130>
     f32:	0c 5f       	subi	r16, 0xFC	; 252
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	9f e3       	ldi	r25, 0x3F	; 63
     f38:	99 83       	std	Y+1, r25	; 0x01
     f3a:	0d c0       	rjmp	.+26     	; 0xf56 <vfprintf+0x14a>
     f3c:	83 36       	cpi	r24, 0x63	; 99
     f3e:	31 f0       	breq	.+12     	; 0xf4c <vfprintf+0x140>
     f40:	83 37       	cpi	r24, 0x73	; 115
     f42:	71 f0       	breq	.+28     	; 0xf60 <vfprintf+0x154>
     f44:	83 35       	cpi	r24, 0x53	; 83
     f46:	09 f0       	breq	.+2      	; 0xf4a <vfprintf+0x13e>
     f48:	55 c0       	rjmp	.+170    	; 0xff4 <vfprintf+0x1e8>
     f4a:	20 c0       	rjmp	.+64     	; 0xf8c <vfprintf+0x180>
     f4c:	f8 01       	movw	r30, r16
     f4e:	80 81       	ld	r24, Z
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	0e 5f       	subi	r16, 0xFE	; 254
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	88 24       	eor	r8, r8
     f58:	83 94       	inc	r8
     f5a:	91 2c       	mov	r9, r1
     f5c:	53 01       	movw	r10, r6
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <vfprintf+0x178>
     f60:	28 01       	movw	r4, r16
     f62:	f2 e0       	ldi	r31, 0x02	; 2
     f64:	4f 0e       	add	r4, r31
     f66:	51 1c       	adc	r5, r1
     f68:	f8 01       	movw	r30, r16
     f6a:	a0 80       	ld	r10, Z
     f6c:	b1 80       	ldd	r11, Z+1	; 0x01
     f6e:	36 fe       	sbrs	r3, 6
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <vfprintf+0x16c>
     f72:	69 2d       	mov	r22, r9
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x170>
     f78:	6f ef       	ldi	r22, 0xFF	; 255
     f7a:	7f ef       	ldi	r23, 0xFF	; 255
     f7c:	c5 01       	movw	r24, r10
     f7e:	4e d1       	rcall	.+668    	; 0x121c <strnlen>
     f80:	4c 01       	movw	r8, r24
     f82:	82 01       	movw	r16, r4
     f84:	f3 2d       	mov	r31, r3
     f86:	ff 77       	andi	r31, 0x7F	; 127
     f88:	3f 2e       	mov	r3, r31
     f8a:	15 c0       	rjmp	.+42     	; 0xfb6 <vfprintf+0x1aa>
     f8c:	28 01       	movw	r4, r16
     f8e:	22 e0       	ldi	r18, 0x02	; 2
     f90:	42 0e       	add	r4, r18
     f92:	51 1c       	adc	r5, r1
     f94:	f8 01       	movw	r30, r16
     f96:	a0 80       	ld	r10, Z
     f98:	b1 80       	ldd	r11, Z+1	; 0x01
     f9a:	36 fe       	sbrs	r3, 6
     f9c:	03 c0       	rjmp	.+6      	; 0xfa4 <vfprintf+0x198>
     f9e:	69 2d       	mov	r22, r9
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <vfprintf+0x19c>
     fa4:	6f ef       	ldi	r22, 0xFF	; 255
     fa6:	7f ef       	ldi	r23, 0xFF	; 255
     fa8:	c5 01       	movw	r24, r10
     faa:	2d d1       	rcall	.+602    	; 0x1206 <strnlen_P>
     fac:	4c 01       	movw	r8, r24
     fae:	f3 2d       	mov	r31, r3
     fb0:	f0 68       	ori	r31, 0x80	; 128
     fb2:	3f 2e       	mov	r3, r31
     fb4:	82 01       	movw	r16, r4
     fb6:	33 fc       	sbrc	r3, 3
     fb8:	19 c0       	rjmp	.+50     	; 0xfec <vfprintf+0x1e0>
     fba:	82 2d       	mov	r24, r2
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 16       	cp	r8, r24
     fc0:	99 06       	cpc	r9, r25
     fc2:	a0 f4       	brcc	.+40     	; 0xfec <vfprintf+0x1e0>
     fc4:	b6 01       	movw	r22, r12
     fc6:	80 e2       	ldi	r24, 0x20	; 32
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	33 d1       	rcall	.+614    	; 0x1232 <fputc>
     fcc:	2a 94       	dec	r2
     fce:	f5 cf       	rjmp	.-22     	; 0xfba <vfprintf+0x1ae>
     fd0:	f5 01       	movw	r30, r10
     fd2:	37 fc       	sbrc	r3, 7
     fd4:	85 91       	lpm	r24, Z+
     fd6:	37 fe       	sbrs	r3, 7
     fd8:	81 91       	ld	r24, Z+
     fda:	5f 01       	movw	r10, r30
     fdc:	b6 01       	movw	r22, r12
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	28 d1       	rcall	.+592    	; 0x1232 <fputc>
     fe2:	21 10       	cpse	r2, r1
     fe4:	2a 94       	dec	r2
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	82 1a       	sub	r8, r18
     fea:	91 08       	sbc	r9, r1
     fec:	81 14       	cp	r8, r1
     fee:	91 04       	cpc	r9, r1
     ff0:	79 f7       	brne	.-34     	; 0xfd0 <vfprintf+0x1c4>
     ff2:	e1 c0       	rjmp	.+450    	; 0x11b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     ff4:	84 36       	cpi	r24, 0x64	; 100
     ff6:	11 f0       	breq	.+4      	; 0xffc <vfprintf+0x1f0>
     ff8:	89 36       	cpi	r24, 0x69	; 105
     ffa:	39 f5       	brne	.+78     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
     ffc:	f8 01       	movw	r30, r16
     ffe:	37 fe       	sbrs	r3, 7
    1000:	07 c0       	rjmp	.+14     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    1002:	60 81       	ld	r22, Z
    1004:	71 81       	ldd	r23, Z+1	; 0x01
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	0c 5f       	subi	r16, 0xFC	; 252
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	07 2e       	mov	r0, r23
    1016:	00 0c       	add	r0, r0
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	0e 5f       	subi	r16, 0xFE	; 254
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
    1020:	f3 2d       	mov	r31, r3
    1022:	ff 76       	andi	r31, 0x6F	; 111
    1024:	3f 2e       	mov	r3, r31
    1026:	97 ff       	sbrs	r25, 7
    1028:	09 c0       	rjmp	.+18     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    102a:	90 95       	com	r25
    102c:	80 95       	com	r24
    102e:	70 95       	com	r23
    1030:	61 95       	neg	r22
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	f0 68       	ori	r31, 0x80	; 128
    103a:	3f 2e       	mov	r3, r31
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	a3 01       	movw	r20, r6
    1042:	33 d1       	rcall	.+614    	; 0x12aa <__ultoa_invert>
    1044:	88 2e       	mov	r8, r24
    1046:	86 18       	sub	r8, r6
    1048:	44 c0       	rjmp	.+136    	; 0x10d2 <__EEPROM_REGION_LENGTH__+0xd2>
    104a:	85 37       	cpi	r24, 0x75	; 117
    104c:	31 f4       	brne	.+12     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    104e:	23 2d       	mov	r18, r3
    1050:	2f 7e       	andi	r18, 0xEF	; 239
    1052:	b2 2e       	mov	r11, r18
    1054:	2a e0       	ldi	r18, 0x0A	; 10
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	25 c0       	rjmp	.+74     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    105a:	93 2d       	mov	r25, r3
    105c:	99 7f       	andi	r25, 0xF9	; 249
    105e:	b9 2e       	mov	r11, r25
    1060:	8f 36       	cpi	r24, 0x6F	; 111
    1062:	c1 f0       	breq	.+48     	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    1064:	18 f4       	brcc	.+6      	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
    1066:	88 35       	cpi	r24, 0x58	; 88
    1068:	79 f0       	breq	.+30     	; 0x1088 <__EEPROM_REGION_LENGTH__+0x88>
    106a:	ae c0       	rjmp	.+348    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    106c:	80 37       	cpi	r24, 0x70	; 112
    106e:	19 f0       	breq	.+6      	; 0x1076 <__EEPROM_REGION_LENGTH__+0x76>
    1070:	88 37       	cpi	r24, 0x78	; 120
    1072:	21 f0       	breq	.+8      	; 0x107c <__EEPROM_REGION_LENGTH__+0x7c>
    1074:	a9 c0       	rjmp	.+338    	; 0x11c8 <__EEPROM_REGION_LENGTH__+0x1c8>
    1076:	e9 2f       	mov	r30, r25
    1078:	e0 61       	ori	r30, 0x10	; 16
    107a:	be 2e       	mov	r11, r30
    107c:	b4 fe       	sbrs	r11, 4
    107e:	0d c0       	rjmp	.+26     	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    1080:	fb 2d       	mov	r31, r11
    1082:	f4 60       	ori	r31, 0x04	; 4
    1084:	bf 2e       	mov	r11, r31
    1086:	09 c0       	rjmp	.+18     	; 0x109a <__EEPROM_REGION_LENGTH__+0x9a>
    1088:	34 fe       	sbrs	r3, 4
    108a:	0a c0       	rjmp	.+20     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    108c:	29 2f       	mov	r18, r25
    108e:	26 60       	ori	r18, 0x06	; 6
    1090:	b2 2e       	mov	r11, r18
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    1094:	28 e0       	ldi	r18, 0x08	; 8
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    109a:	20 e1       	ldi	r18, 0x10	; 16
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <__EEPROM_REGION_LENGTH__+0xa4>
    10a0:	20 e1       	ldi	r18, 0x10	; 16
    10a2:	32 e0       	ldi	r19, 0x02	; 2
    10a4:	f8 01       	movw	r30, r16
    10a6:	b7 fe       	sbrs	r11, 7
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <__EEPROM_REGION_LENGTH__+0xb8>
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	0c 5f       	subi	r16, 0xFC	; 252
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	06 c0       	rjmp	.+12     	; 0x10c4 <__EEPROM_REGION_LENGTH__+0xc4>
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 5f       	subi	r16, 0xFE	; 254
    10c2:	1f 4f       	sbci	r17, 0xFF	; 255
    10c4:	a3 01       	movw	r20, r6
    10c6:	f1 d0       	rcall	.+482    	; 0x12aa <__ultoa_invert>
    10c8:	88 2e       	mov	r8, r24
    10ca:	86 18       	sub	r8, r6
    10cc:	fb 2d       	mov	r31, r11
    10ce:	ff 77       	andi	r31, 0x7F	; 127
    10d0:	3f 2e       	mov	r3, r31
    10d2:	36 fe       	sbrs	r3, 6
    10d4:	0d c0       	rjmp	.+26     	; 0x10f0 <__EEPROM_REGION_LENGTH__+0xf0>
    10d6:	23 2d       	mov	r18, r3
    10d8:	2e 7f       	andi	r18, 0xFE	; 254
    10da:	a2 2e       	mov	r10, r18
    10dc:	89 14       	cp	r8, r9
    10de:	58 f4       	brcc	.+22     	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    10e0:	34 fe       	sbrs	r3, 4
    10e2:	0b c0       	rjmp	.+22     	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
    10e4:	32 fc       	sbrc	r3, 2
    10e6:	09 c0       	rjmp	.+18     	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
    10e8:	83 2d       	mov	r24, r3
    10ea:	8e 7e       	andi	r24, 0xEE	; 238
    10ec:	a8 2e       	mov	r10, r24
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <__EEPROM_REGION_LENGTH__+0xfa>
    10f0:	b8 2c       	mov	r11, r8
    10f2:	a3 2c       	mov	r10, r3
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
    10f6:	b8 2c       	mov	r11, r8
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
    10fa:	b9 2c       	mov	r11, r9
    10fc:	a4 fe       	sbrs	r10, 4
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <__EEPROM_REGION_LENGTH__+0x11e>
    1100:	fe 01       	movw	r30, r28
    1102:	e8 0d       	add	r30, r8
    1104:	f1 1d       	adc	r31, r1
    1106:	80 81       	ld	r24, Z
    1108:	80 33       	cpi	r24, 0x30	; 48
    110a:	21 f4       	brne	.+8      	; 0x1114 <__EEPROM_REGION_LENGTH__+0x114>
    110c:	9a 2d       	mov	r25, r10
    110e:	99 7e       	andi	r25, 0xE9	; 233
    1110:	a9 2e       	mov	r10, r25
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <__EEPROM_REGION_LENGTH__+0x126>
    1114:	a2 fe       	sbrs	r10, 2
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <__EEPROM_REGION_LENGTH__+0x124>
    1118:	b3 94       	inc	r11
    111a:	b3 94       	inc	r11
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <__EEPROM_REGION_LENGTH__+0x126>
    111e:	8a 2d       	mov	r24, r10
    1120:	86 78       	andi	r24, 0x86	; 134
    1122:	09 f0       	breq	.+2      	; 0x1126 <__EEPROM_REGION_LENGTH__+0x126>
    1124:	b3 94       	inc	r11
    1126:	a3 fc       	sbrc	r10, 3
    1128:	10 c0       	rjmp	.+32     	; 0x114a <__EEPROM_REGION_LENGTH__+0x14a>
    112a:	a0 fe       	sbrs	r10, 0
    112c:	06 c0       	rjmp	.+12     	; 0x113a <__EEPROM_REGION_LENGTH__+0x13a>
    112e:	b2 14       	cp	r11, r2
    1130:	80 f4       	brcc	.+32     	; 0x1152 <__EEPROM_REGION_LENGTH__+0x152>
    1132:	28 0c       	add	r2, r8
    1134:	92 2c       	mov	r9, r2
    1136:	9b 18       	sub	r9, r11
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
    113a:	b2 14       	cp	r11, r2
    113c:	58 f4       	brcc	.+22     	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
    113e:	b6 01       	movw	r22, r12
    1140:	80 e2       	ldi	r24, 0x20	; 32
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	76 d0       	rcall	.+236    	; 0x1232 <fputc>
    1146:	b3 94       	inc	r11
    1148:	f8 cf       	rjmp	.-16     	; 0x113a <__EEPROM_REGION_LENGTH__+0x13a>
    114a:	b2 14       	cp	r11, r2
    114c:	18 f4       	brcc	.+6      	; 0x1154 <__EEPROM_REGION_LENGTH__+0x154>
    114e:	2b 18       	sub	r2, r11
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <__EEPROM_REGION_LENGTH__+0x156>
    1152:	98 2c       	mov	r9, r8
    1154:	21 2c       	mov	r2, r1
    1156:	a4 fe       	sbrs	r10, 4
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <__EEPROM_REGION_LENGTH__+0x178>
    115a:	b6 01       	movw	r22, r12
    115c:	80 e3       	ldi	r24, 0x30	; 48
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	68 d0       	rcall	.+208    	; 0x1232 <fputc>
    1162:	a2 fe       	sbrs	r10, 2
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <__EEPROM_REGION_LENGTH__+0x192>
    1166:	a1 fc       	sbrc	r10, 1
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <__EEPROM_REGION_LENGTH__+0x170>
    116a:	88 e7       	ldi	r24, 0x78	; 120
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <__EEPROM_REGION_LENGTH__+0x174>
    1170:	88 e5       	ldi	r24, 0x58	; 88
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	b6 01       	movw	r22, r12
    1176:	0c c0       	rjmp	.+24     	; 0x1190 <__EEPROM_REGION_LENGTH__+0x190>
    1178:	8a 2d       	mov	r24, r10
    117a:	86 78       	andi	r24, 0x86	; 134
    117c:	51 f0       	breq	.+20     	; 0x1192 <__EEPROM_REGION_LENGTH__+0x192>
    117e:	a1 fe       	sbrs	r10, 1
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__EEPROM_REGION_LENGTH__+0x186>
    1182:	8b e2       	ldi	r24, 0x2B	; 43
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
    1186:	80 e2       	ldi	r24, 0x20	; 32
    1188:	a7 fc       	sbrc	r10, 7
    118a:	8d e2       	ldi	r24, 0x2D	; 45
    118c:	b6 01       	movw	r22, r12
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	50 d0       	rcall	.+160    	; 0x1232 <fputc>
    1192:	89 14       	cp	r8, r9
    1194:	30 f4       	brcc	.+12     	; 0x11a2 <__EEPROM_REGION_LENGTH__+0x1a2>
    1196:	b6 01       	movw	r22, r12
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	4a d0       	rcall	.+148    	; 0x1232 <fputc>
    119e:	9a 94       	dec	r9
    11a0:	f8 cf       	rjmp	.-16     	; 0x1192 <__EEPROM_REGION_LENGTH__+0x192>
    11a2:	8a 94       	dec	r8
    11a4:	f3 01       	movw	r30, r6
    11a6:	e8 0d       	add	r30, r8
    11a8:	f1 1d       	adc	r31, r1
    11aa:	80 81       	ld	r24, Z
    11ac:	b6 01       	movw	r22, r12
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	40 d0       	rcall	.+128    	; 0x1232 <fputc>
    11b2:	81 10       	cpse	r8, r1
    11b4:	f6 cf       	rjmp	.-20     	; 0x11a2 <__EEPROM_REGION_LENGTH__+0x1a2>
    11b6:	22 20       	and	r2, r2
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__EEPROM_REGION_LENGTH__+0x1bc>
    11ba:	4e ce       	rjmp	.-868    	; 0xe58 <vfprintf+0x4c>
    11bc:	b6 01       	movw	r22, r12
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	37 d0       	rcall	.+110    	; 0x1232 <fputc>
    11c4:	2a 94       	dec	r2
    11c6:	f7 cf       	rjmp	.-18     	; 0x11b6 <__EEPROM_REGION_LENGTH__+0x1b6>
    11c8:	f6 01       	movw	r30, r12
    11ca:	86 81       	ldd	r24, Z+6	; 0x06
    11cc:	97 81       	ldd	r25, Z+7	; 0x07
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <__EEPROM_REGION_LENGTH__+0x1d4>
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	2b 96       	adiw	r28, 0x0b	; 11
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	bf 90       	pop	r11
    11f2:	af 90       	pop	r10
    11f4:	9f 90       	pop	r9
    11f6:	8f 90       	pop	r8
    11f8:	7f 90       	pop	r7
    11fa:	6f 90       	pop	r6
    11fc:	5f 90       	pop	r5
    11fe:	4f 90       	pop	r4
    1200:	3f 90       	pop	r3
    1202:	2f 90       	pop	r2
    1204:	08 95       	ret

00001206 <strnlen_P>:
    1206:	fc 01       	movw	r30, r24
    1208:	05 90       	lpm	r0, Z+
    120a:	61 50       	subi	r22, 0x01	; 1
    120c:	70 40       	sbci	r23, 0x00	; 0
    120e:	01 10       	cpse	r0, r1
    1210:	d8 f7       	brcc	.-10     	; 0x1208 <strnlen_P+0x2>
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	8e 0f       	add	r24, r30
    1218:	9f 1f       	adc	r25, r31
    121a:	08 95       	ret

0000121c <strnlen>:
    121c:	fc 01       	movw	r30, r24
    121e:	61 50       	subi	r22, 0x01	; 1
    1220:	70 40       	sbci	r23, 0x00	; 0
    1222:	01 90       	ld	r0, Z+
    1224:	01 10       	cpse	r0, r1
    1226:	d8 f7       	brcc	.-10     	; 0x121e <strnlen+0x2>
    1228:	80 95       	com	r24
    122a:	90 95       	com	r25
    122c:	8e 0f       	add	r24, r30
    122e:	9f 1f       	adc	r25, r31
    1230:	08 95       	ret

00001232 <fputc>:
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	fb 01       	movw	r30, r22
    123c:	23 81       	ldd	r18, Z+3	; 0x03
    123e:	21 fd       	sbrc	r18, 1
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <fputc+0x16>
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	2c c0       	rjmp	.+88     	; 0x12a0 <fputc+0x6e>
    1248:	22 ff       	sbrs	r18, 2
    124a:	16 c0       	rjmp	.+44     	; 0x1278 <fputc+0x46>
    124c:	46 81       	ldd	r20, Z+6	; 0x06
    124e:	57 81       	ldd	r21, Z+7	; 0x07
    1250:	24 81       	ldd	r18, Z+4	; 0x04
    1252:	35 81       	ldd	r19, Z+5	; 0x05
    1254:	42 17       	cp	r20, r18
    1256:	53 07       	cpc	r21, r19
    1258:	44 f4       	brge	.+16     	; 0x126a <fputc+0x38>
    125a:	a0 81       	ld	r26, Z
    125c:	b1 81       	ldd	r27, Z+1	; 0x01
    125e:	9d 01       	movw	r18, r26
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	31 83       	std	Z+1, r19	; 0x01
    1266:	20 83       	st	Z, r18
    1268:	8c 93       	st	X, r24
    126a:	26 81       	ldd	r18, Z+6	; 0x06
    126c:	37 81       	ldd	r19, Z+7	; 0x07
    126e:	2f 5f       	subi	r18, 0xFF	; 255
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	37 83       	std	Z+7, r19	; 0x07
    1274:	26 83       	std	Z+6, r18	; 0x06
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <fputc+0x6e>
    1278:	8b 01       	movw	r16, r22
    127a:	ec 01       	movw	r28, r24
    127c:	fb 01       	movw	r30, r22
    127e:	00 84       	ldd	r0, Z+8	; 0x08
    1280:	f1 85       	ldd	r31, Z+9	; 0x09
    1282:	e0 2d       	mov	r30, r0
    1284:	19 95       	eicall
    1286:	89 2b       	or	r24, r25
    1288:	e1 f6       	brne	.-72     	; 0x1242 <fputc+0x10>
    128a:	d8 01       	movw	r26, r16
    128c:	16 96       	adiw	r26, 0x06	; 6
    128e:	8d 91       	ld	r24, X+
    1290:	9c 91       	ld	r25, X
    1292:	17 97       	sbiw	r26, 0x07	; 7
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	17 96       	adiw	r26, 0x07	; 7
    1298:	9c 93       	st	X, r25
    129a:	8e 93       	st	-X, r24
    129c:	16 97       	sbiw	r26, 0x06	; 6
    129e:	ce 01       	movw	r24, r28
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <__ultoa_invert>:
    12aa:	fa 01       	movw	r30, r20
    12ac:	aa 27       	eor	r26, r26
    12ae:	28 30       	cpi	r18, 0x08	; 8
    12b0:	51 f1       	breq	.+84     	; 0x1306 <__ultoa_invert+0x5c>
    12b2:	20 31       	cpi	r18, 0x10	; 16
    12b4:	81 f1       	breq	.+96     	; 0x1316 <__ultoa_invert+0x6c>
    12b6:	e8 94       	clt
    12b8:	6f 93       	push	r22
    12ba:	6e 7f       	andi	r22, 0xFE	; 254
    12bc:	6e 5f       	subi	r22, 0xFE	; 254
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	8f 4f       	sbci	r24, 0xFF	; 255
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	af 4f       	sbci	r26, 0xFF	; 255
    12c6:	b1 e0       	ldi	r27, 0x01	; 1
    12c8:	3e d0       	rcall	.+124    	; 0x1346 <__ultoa_invert+0x9c>
    12ca:	b4 e0       	ldi	r27, 0x04	; 4
    12cc:	3c d0       	rcall	.+120    	; 0x1346 <__ultoa_invert+0x9c>
    12ce:	67 0f       	add	r22, r23
    12d0:	78 1f       	adc	r23, r24
    12d2:	89 1f       	adc	r24, r25
    12d4:	9a 1f       	adc	r25, r26
    12d6:	a1 1d       	adc	r26, r1
    12d8:	68 0f       	add	r22, r24
    12da:	79 1f       	adc	r23, r25
    12dc:	8a 1f       	adc	r24, r26
    12de:	91 1d       	adc	r25, r1
    12e0:	a1 1d       	adc	r26, r1
    12e2:	6a 0f       	add	r22, r26
    12e4:	71 1d       	adc	r23, r1
    12e6:	81 1d       	adc	r24, r1
    12e8:	91 1d       	adc	r25, r1
    12ea:	a1 1d       	adc	r26, r1
    12ec:	20 d0       	rcall	.+64     	; 0x132e <__ultoa_invert+0x84>
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <__ultoa_invert+0x48>
    12f0:	68 94       	set
    12f2:	3f 91       	pop	r19
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	26 9f       	mul	r18, r22
    12f8:	11 24       	eor	r1, r1
    12fa:	30 19       	sub	r19, r0
    12fc:	30 5d       	subi	r19, 0xD0	; 208
    12fe:	31 93       	st	Z+, r19
    1300:	de f6       	brtc	.-74     	; 0x12b8 <__ultoa_invert+0xe>
    1302:	cf 01       	movw	r24, r30
    1304:	08 95       	ret
    1306:	46 2f       	mov	r20, r22
    1308:	47 70       	andi	r20, 0x07	; 7
    130a:	40 5d       	subi	r20, 0xD0	; 208
    130c:	41 93       	st	Z+, r20
    130e:	b3 e0       	ldi	r27, 0x03	; 3
    1310:	0f d0       	rcall	.+30     	; 0x1330 <__ultoa_invert+0x86>
    1312:	c9 f7       	brne	.-14     	; 0x1306 <__ultoa_invert+0x5c>
    1314:	f6 cf       	rjmp	.-20     	; 0x1302 <__ultoa_invert+0x58>
    1316:	46 2f       	mov	r20, r22
    1318:	4f 70       	andi	r20, 0x0F	; 15
    131a:	40 5d       	subi	r20, 0xD0	; 208
    131c:	4a 33       	cpi	r20, 0x3A	; 58
    131e:	18 f0       	brcs	.+6      	; 0x1326 <__ultoa_invert+0x7c>
    1320:	49 5d       	subi	r20, 0xD9	; 217
    1322:	31 fd       	sbrc	r19, 1
    1324:	40 52       	subi	r20, 0x20	; 32
    1326:	41 93       	st	Z+, r20
    1328:	02 d0       	rcall	.+4      	; 0x132e <__ultoa_invert+0x84>
    132a:	a9 f7       	brne	.-22     	; 0x1316 <__ultoa_invert+0x6c>
    132c:	ea cf       	rjmp	.-44     	; 0x1302 <__ultoa_invert+0x58>
    132e:	b4 e0       	ldi	r27, 0x04	; 4
    1330:	a6 95       	lsr	r26
    1332:	97 95       	ror	r25
    1334:	87 95       	ror	r24
    1336:	77 95       	ror	r23
    1338:	67 95       	ror	r22
    133a:	ba 95       	dec	r27
    133c:	c9 f7       	brne	.-14     	; 0x1330 <__ultoa_invert+0x86>
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	61 05       	cpc	r22, r1
    1342:	71 05       	cpc	r23, r1
    1344:	08 95       	ret
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	0a 2e       	mov	r0, r26
    134c:	06 94       	lsr	r0
    134e:	57 95       	ror	r21
    1350:	47 95       	ror	r20
    1352:	37 95       	ror	r19
    1354:	27 95       	ror	r18
    1356:	ba 95       	dec	r27
    1358:	c9 f7       	brne	.-14     	; 0x134c <__ultoa_invert+0xa2>
    135a:	62 0f       	add	r22, r18
    135c:	73 1f       	adc	r23, r19
    135e:	84 1f       	adc	r24, r20
    1360:	95 1f       	adc	r25, r21
    1362:	a0 1d       	adc	r26, r0
    1364:	08 95       	ret

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
